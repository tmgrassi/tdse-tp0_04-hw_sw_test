
tdse-tp0_04-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080041e8  080041e8  000051e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b0  080043b0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080043b0  080043b0  000053b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b8  080043b8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043bc  080043bc  000053bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080043c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08004430  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004430  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d3f  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158e  00000000  00000000  0000dddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000524  00000000  00000000  0000fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021074  00000000  00000000  0000ff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008af8  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c84e6  00000000  00000000  00039ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a8  00000000  00000000  00101fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00104994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041d0 	.word	0x080041d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080041d0 	.word	0x080041d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	@ 0x38
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80005b6:	f002 f80f 	bl	80025d8 <initialise_monitor_handles>

	char s[50];

	char *p;

	p = s;
 80005ba:	463b      	mov	r3, r7
 80005bc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fa41 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f821 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f8b7 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f88b 	bl	80006e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World!\n");
 80005ce:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <main+0x48>)
 80005d0:	f002 f9b2 	bl	8002938 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Enter string:\n");
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <main+0x4c>)
 80005d6:	f002 f9af 	bl	8002938 <puts>

	  scanf("%s", p);
 80005da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80005dc:	4808      	ldr	r0, [pc, #32]	@ (8000600 <main+0x50>)
 80005de:	f002 f9b3 	bl	8002948 <iscanf>

	  printf("\nReceived string: ");
 80005e2:	4808      	ldr	r0, [pc, #32]	@ (8000604 <main+0x54>)
 80005e4:	f002 f938 	bl	8002858 <iprintf>

	  printf(p);
 80005e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80005ea:	f002 f935 	bl	8002858 <iprintf>

	  printf("\n");
 80005ee:	200a      	movs	r0, #10
 80005f0:	f002 f944 	bl	800287c <putchar>
	  printf("Enter string:\n");
 80005f4:	bf00      	nop
 80005f6:	e7ed      	b.n	80005d4 <main+0x24>
 80005f8:	080041e8 	.word	0x080041e8
 80005fc:	080041f8 	.word	0x080041f8
 8000600:	08004208 	.word	0x08004208
 8000604:	0800420c 	.word	0x0800420c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fa80 	bl	8002b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a29      	ldr	r2, [pc, #164]	@ (80006dc <SystemClock_Config+0xd4>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <SystemClock_Config+0xd8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000654:	4a22      	ldr	r2, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd8>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800067c:	2310      	movs	r3, #16
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000680:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000686:	2304      	movs	r3, #4
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f824 	bl	80016e4 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a2:	f000 f8b7 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fcc4 	bl	8001050 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ce:	f000 f8a1 	bl	8000814 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 fa80 	bl	8001c20 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f875 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a2c      	ldr	r2, [pc, #176]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a25      	ldr	r2, [pc, #148]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a1e      	ldr	r2, [pc, #120]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4812      	ldr	r0, [pc, #72]	@ (800080c <MX_GPIO_Init+0xd4>)
 80007c4:	f000 fc2a 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <MX_GPIO_Init+0xd8>)
 80007e0:	f000 fa88 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e4:	2320      	movs	r3, #32
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_GPIO_Init+0xd4>)
 80007fc:	f000 fa7a 	bl	8000cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000
 8000810:	40020800 	.word	0x40020800

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085e:	2007      	movs	r0, #7
 8000860:	f000 fa14 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <HAL_UART_MspInit+0x84>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12b      	bne.n	80008ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ca:	230c      	movs	r3, #12
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <HAL_UART_MspInit+0x8c>)
 80008e6:	f000 fa05 	bl	8000cf4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	@ 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <UsageFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 f8c7 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f002 f912 	bl	8002bb8 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20020000 	.word	0x20020000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200000d4 	.word	0x200000d4
 80009c8:	200002d8 	.word	0x200002d8

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 f8d1 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fdc5 	bl	80005b0 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a34:	080043c0 	.word	0x080043c0
  ldr r2, =_sbss
 8000a38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a3c:	200002d4 	.word	0x200002d4

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f90d 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fed2 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f917 	bl	8000cda <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	f000 f8ed 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000d8 	.word	0x200000d8

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000d8 	.word	0x200000d8

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff47 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff5c 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffb0 	bl	8000c48 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	e165      	b.n	8000fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8154 	bne.w	8000fd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d005      	beq.n	8000d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d130      	bne.n	8000da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	f003 0201 	and.w	r2, r3, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d017      	beq.n	8000de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d123      	bne.n	8000e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	69b9      	ldr	r1, [r7, #24]
 8000e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0203 	and.w	r2, r3, #3
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80ae 	beq.w	8000fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff4 <HAL_GPIO_Init+0x300>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	4a5c      	ldr	r2, [pc, #368]	@ (8000ff4 <HAL_GPIO_Init+0x300>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff4 <HAL_GPIO_Init+0x300>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e96:	4a58      	ldr	r2, [pc, #352]	@ (8000ff8 <HAL_GPIO_Init+0x304>)
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8000ffc <HAL_GPIO_Init+0x308>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d025      	beq.n	8000f0e <HAL_GPIO_Init+0x21a>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8001000 <HAL_GPIO_Init+0x30c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01f      	beq.n	8000f0a <HAL_GPIO_Init+0x216>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8001004 <HAL_GPIO_Init+0x310>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x212>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8001008 <HAL_GPIO_Init+0x314>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x20e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4b      	ldr	r2, [pc, #300]	@ (800100c <HAL_GPIO_Init+0x318>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x20a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8001010 <HAL_GPIO_Init+0x31c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x206>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	@ (8001014 <HAL_GPIO_Init+0x320>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x202>
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	e00c      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e00a      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x21c>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	@ (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a31      	ldr	r2, [pc, #196]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a26      	ldr	r2, [pc, #152]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd0:	4a11      	ldr	r2, [pc, #68]	@ (8001018 <HAL_GPIO_Init+0x324>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f ae96 	bls.w	8000d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	@ 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40021400 	.word	0x40021400
 8001014:	40021800 	.word	0x40021800
 8001018:	40013c00 	.word	0x40013c00

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001038:	e003      	b.n	8001042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0cc      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4b68      	ldr	r3, [pc, #416]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d90c      	bls.n	800108c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b65      	ldr	r3, [pc, #404]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0b8      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a4:	4b59      	ldr	r3, [pc, #356]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a58      	ldr	r2, [pc, #352]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010bc:	4b53      	ldr	r3, [pc, #332]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a52      	ldr	r2, [pc, #328]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c8:	4b50      	ldr	r3, [pc, #320]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	494d      	ldr	r1, [pc, #308]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d044      	beq.n	8001170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b47      	ldr	r3, [pc, #284]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d119      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e07f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	2b03      	cmp	r3, #3
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e06f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e067      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b37      	ldr	r3, [pc, #220]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4934      	ldr	r1, [pc, #208]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fce6 	bl	8000b10 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	e00a      	b.n	800115e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f7ff fce2 	bl	8000b10 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001156:	4293      	cmp	r3, r2
 8001158:	d901      	bls.n	800115e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e04f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 020c 	and.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	429a      	cmp	r2, r3
 800116e:	d1eb      	bne.n	8001148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d20c      	bcs.n	8001198 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e032      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4916      	ldr	r1, [pc, #88]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	490e      	ldr	r1, [pc, #56]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011d6:	f000 f855 	bl	8001284 <HAL_RCC_GetSysClockFreq>
 80011da:	4602      	mov	r2, r0
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	490a      	ldr	r1, [pc, #40]	@ (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	5ccb      	ldrb	r3, [r1, r3]
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_RCC_ClockConfig+0x1c8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fc46 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00
 800120c:	40023800 	.word	0x40023800
 8001210:	0800422c 	.word	0x0800422c
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_RCC_GetHCLKFreq+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000

08001234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001238:	f7ff fff0 	bl	800121c <HAL_RCC_GetHCLKFreq>
 800123c:	4602      	mov	r2, r0
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	0a9b      	lsrs	r3, r3, #10
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	4903      	ldr	r1, [pc, #12]	@ (8001258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800124a:	5ccb      	ldrb	r3, [r1, r3]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	0800423c 	.word	0x0800423c

0800125c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001260:	f7ff ffdc 	bl	800121c <HAL_RCC_GetHCLKFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0b5b      	lsrs	r3, r3, #13
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	4903      	ldr	r1, [pc, #12]	@ (8001280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001272:	5ccb      	ldrb	r3, [r1, r3]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	0800423c 	.word	0x0800423c

08001284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001288:	b0ae      	sub	sp, #184	@ 0xb8
 800128a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012aa:	4bcb      	ldr	r3, [pc, #812]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	f200 8206 	bhi.w	80016c4 <HAL_RCC_GetSysClockFreq+0x440>
 80012b8:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012f5 	.word	0x080012f5
 80012c4:	080016c5 	.word	0x080016c5
 80012c8:	080016c5 	.word	0x080016c5
 80012cc:	080016c5 	.word	0x080016c5
 80012d0:	080012fd 	.word	0x080012fd
 80012d4:	080016c5 	.word	0x080016c5
 80012d8:	080016c5 	.word	0x080016c5
 80012dc:	080016c5 	.word	0x080016c5
 80012e0:	08001305 	.word	0x08001305
 80012e4:	080016c5 	.word	0x080016c5
 80012e8:	080016c5 	.word	0x080016c5
 80012ec:	080016c5 	.word	0x080016c5
 80012f0:	080014f5 	.word	0x080014f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f4:	4bb9      	ldr	r3, [pc, #740]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x358>)
 80012f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80012fa:	e1e7      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012fc:	4bb8      	ldr	r3, [pc, #736]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001302:	e1e3      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001304:	4bb4      	ldr	r3, [pc, #720]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800130c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001310:	4bb1      	ldr	r3, [pc, #708]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d071      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800131c:	4bae      	ldr	r3, [pc, #696]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	099b      	lsrs	r3, r3, #6
 8001322:	2200      	movs	r2, #0
 8001324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001328:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800132c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001334:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800133e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001342:	4622      	mov	r2, r4
 8001344:	462b      	mov	r3, r5
 8001346:	f04f 0000 	mov.w	r0, #0
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	0159      	lsls	r1, r3, #5
 8001350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001354:	0150      	lsls	r0, r2, #5
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4621      	mov	r1, r4
 800135c:	1a51      	subs	r1, r2, r1
 800135e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001360:	4629      	mov	r1, r5
 8001362:	eb63 0301 	sbc.w	r3, r3, r1
 8001366:	647b      	str	r3, [r7, #68]	@ 0x44
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001374:	4649      	mov	r1, r9
 8001376:	018b      	lsls	r3, r1, #6
 8001378:	4641      	mov	r1, r8
 800137a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800137e:	4641      	mov	r1, r8
 8001380:	018a      	lsls	r2, r1, #6
 8001382:	4641      	mov	r1, r8
 8001384:	1a51      	subs	r1, r2, r1
 8001386:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001388:	4649      	mov	r1, r9
 800138a:	eb63 0301 	sbc.w	r3, r3, r1
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800139c:	4649      	mov	r1, r9
 800139e:	00cb      	lsls	r3, r1, #3
 80013a0:	4641      	mov	r1, r8
 80013a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013a6:	4641      	mov	r1, r8
 80013a8:	00ca      	lsls	r2, r1, #3
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	4622      	mov	r2, r4
 80013b2:	189b      	adds	r3, r3, r2
 80013b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013b6:	462b      	mov	r3, r5
 80013b8:	460a      	mov	r2, r1
 80013ba:	eb42 0303 	adc.w	r3, r2, r3
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013cc:	4629      	mov	r1, r5
 80013ce:	024b      	lsls	r3, r1, #9
 80013d0:	4621      	mov	r1, r4
 80013d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013d6:	4621      	mov	r1, r4
 80013d8:	024a      	lsls	r2, r1, #9
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80013e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80013ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80013f0:	f7fe ff66 	bl	80002c0 <__aeabi_uldivmod>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4613      	mov	r3, r2
 80013fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013fe:	e067      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001400:	4b75      	ldr	r3, [pc, #468]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	2200      	movs	r2, #0
 8001408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800140c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001410:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800141a:	2300      	movs	r3, #0
 800141c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800141e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001422:	4622      	mov	r2, r4
 8001424:	462b      	mov	r3, r5
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	0159      	lsls	r1, r3, #5
 8001430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001434:	0150      	lsls	r0, r2, #5
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4621      	mov	r1, r4
 800143c:	1a51      	subs	r1, r2, r1
 800143e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001440:	4629      	mov	r1, r5
 8001442:	eb63 0301 	sbc.w	r3, r3, r1
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001454:	4649      	mov	r1, r9
 8001456:	018b      	lsls	r3, r1, #6
 8001458:	4641      	mov	r1, r8
 800145a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800145e:	4641      	mov	r1, r8
 8001460:	018a      	lsls	r2, r1, #6
 8001462:	4641      	mov	r1, r8
 8001464:	ebb2 0a01 	subs.w	sl, r2, r1
 8001468:	4649      	mov	r1, r9
 800146a:	eb63 0b01 	sbc.w	fp, r3, r1
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800147a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800147e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001482:	4692      	mov	sl, r2
 8001484:	469b      	mov	fp, r3
 8001486:	4623      	mov	r3, r4
 8001488:	eb1a 0303 	adds.w	r3, sl, r3
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	462b      	mov	r3, r5
 8001490:	eb4b 0303 	adc.w	r3, fp, r3
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014a2:	4629      	mov	r1, r5
 80014a4:	028b      	lsls	r3, r1, #10
 80014a6:	4621      	mov	r1, r4
 80014a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014ac:	4621      	mov	r1, r4
 80014ae:	028a      	lsls	r2, r1, #10
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014b8:	2200      	movs	r2, #0
 80014ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80014bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80014be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014c2:	f7fe fefd 	bl	80002c0 <__aeabi_uldivmod>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4613      	mov	r3, r2
 80014cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014d0:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	3301      	adds	r3, #1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80014e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014f2:	e0eb      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001500:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d06b      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	2200      	movs	r2, #0
 8001514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001516:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800151a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800151e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001520:	2300      	movs	r3, #0
 8001522:	667b      	str	r3, [r7, #100]	@ 0x64
 8001524:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001528:	4622      	mov	r2, r4
 800152a:	462b      	mov	r3, r5
 800152c:	f04f 0000 	mov.w	r0, #0
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	0159      	lsls	r1, r3, #5
 8001536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800153a:	0150      	lsls	r0, r2, #5
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4621      	mov	r1, r4
 8001542:	1a51      	subs	r1, r2, r1
 8001544:	61b9      	str	r1, [r7, #24]
 8001546:	4629      	mov	r1, r5
 8001548:	eb63 0301 	sbc.w	r3, r3, r1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800155a:	4659      	mov	r1, fp
 800155c:	018b      	lsls	r3, r1, #6
 800155e:	4651      	mov	r1, sl
 8001560:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001564:	4651      	mov	r1, sl
 8001566:	018a      	lsls	r2, r1, #6
 8001568:	4651      	mov	r1, sl
 800156a:	ebb2 0801 	subs.w	r8, r2, r1
 800156e:	4659      	mov	r1, fp
 8001570:	eb63 0901 	sbc.w	r9, r3, r1
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001580:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001584:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001588:	4690      	mov	r8, r2
 800158a:	4699      	mov	r9, r3
 800158c:	4623      	mov	r3, r4
 800158e:	eb18 0303 	adds.w	r3, r8, r3
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	462b      	mov	r3, r5
 8001596:	eb49 0303 	adc.w	r3, r9, r3
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015a8:	4629      	mov	r1, r5
 80015aa:	024b      	lsls	r3, r1, #9
 80015ac:	4621      	mov	r1, r4
 80015ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015b2:	4621      	mov	r1, r4
 80015b4:	024a      	lsls	r2, r1, #9
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015be:	2200      	movs	r2, #0
 80015c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015c8:	f7fe fe7a 	bl	80002c0 <__aeabi_uldivmod>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4613      	mov	r3, r2
 80015d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015d6:	e065      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x420>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	00f42400 	.word	0x00f42400
 80015e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b3d      	ldr	r3, [pc, #244]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x458>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	2200      	movs	r2, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	4611      	mov	r1, r2
 80015f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80015f6:	2300      	movs	r3, #0
 80015f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80015fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80015fe:	4642      	mov	r2, r8
 8001600:	464b      	mov	r3, r9
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	0159      	lsls	r1, r3, #5
 800160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001610:	0150      	lsls	r0, r2, #5
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4641      	mov	r1, r8
 8001618:	1a51      	subs	r1, r2, r1
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	4649      	mov	r1, r9
 800161e:	eb63 0301 	sbc.w	r3, r3, r1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001630:	4659      	mov	r1, fp
 8001632:	018b      	lsls	r3, r1, #6
 8001634:	4651      	mov	r1, sl
 8001636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800163a:	4651      	mov	r1, sl
 800163c:	018a      	lsls	r2, r1, #6
 800163e:	4651      	mov	r1, sl
 8001640:	1a54      	subs	r4, r2, r1
 8001642:	4659      	mov	r1, fp
 8001644:	eb63 0501 	sbc.w	r5, r3, r1
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	00eb      	lsls	r3, r5, #3
 8001652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001656:	00e2      	lsls	r2, r4, #3
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	4643      	mov	r3, r8
 800165e:	18e3      	adds	r3, r4, r3
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	464b      	mov	r3, r9
 8001664:	eb45 0303 	adc.w	r3, r5, r3
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001676:	4629      	mov	r1, r5
 8001678:	028b      	lsls	r3, r1, #10
 800167a:	4621      	mov	r1, r4
 800167c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001680:	4621      	mov	r1, r4
 8001682:	028a      	lsls	r2, r1, #10
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800168c:	2200      	movs	r2, #0
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001690:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001696:	f7fe fe13 	bl	80002c0 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4613      	mov	r3, r2
 80016a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x458>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	0f1b      	lsrs	r3, r3, #28
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80016b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016c2:	e003      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	37b8      	adds	r7, #184	@ 0xb8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	00f42400 	.word	0x00f42400

080016e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e28d      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8083 	beq.w	800180a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001704:	4b94      	ldr	r3, [pc, #592]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	d019      	beq.n	8001744 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001710:	4b91      	ldr	r3, [pc, #580]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
        || \
 8001718:	2b08      	cmp	r3, #8
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800171c:	4b8e      	ldr	r3, [pc, #568]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001728:	d00c      	beq.n	8001744 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172a:	4b8b      	ldr	r3, [pc, #556]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d112      	bne.n	800175c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b88      	ldr	r3, [pc, #544]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001742:	d10b      	bne.n	800175c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b84      	ldr	r3, [pc, #528]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05b      	beq.n	8001808 <HAL_RCC_OscConfig+0x124>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d157      	bne.n	8001808 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e25a      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x90>
 8001766:	4b7c      	ldr	r3, [pc, #496]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7b      	ldr	r2, [pc, #492]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xcc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0xb4>
 800177e:	4b76      	ldr	r3, [pc, #472]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a75      	ldr	r2, [pc, #468]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b73      	ldr	r3, [pc, #460]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a72      	ldr	r2, [pc, #456]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xcc>
 8001798:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6b      	ldr	r2, [pc, #428]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff f9aa 	bl	8000b10 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff f9a6 	bl	8000b10 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e21f      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b61      	ldr	r3, [pc, #388]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xdc>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f996 	bl	8000b10 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff f992 	bl	8000b10 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e20b      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b57      	ldr	r3, [pc, #348]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x104>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06f      	beq.n	80018f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001816:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	d017      	beq.n	8001852 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001822:	4b4d      	ldr	r3, [pc, #308]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
        || \
 800182a:	2b08      	cmp	r3, #8
 800182c:	d105      	bne.n	800183a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800182e:	4b4a      	ldr	r3, [pc, #296]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b44      	ldr	r3, [pc, #272]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b41      	ldr	r3, [pc, #260]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x186>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1d3      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4937      	ldr	r1, [pc, #220]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b34      	ldr	r3, [pc, #208]	@ (800195c <HAL_RCC_OscConfig+0x278>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff f93f 	bl	8000b10 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f93b 	bl	8000b10 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1b4      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4925      	ldr	r1, [pc, #148]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <HAL_RCC_OscConfig+0x278>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff f91e 	bl	8000b10 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff f91a 	bl	8000b10 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e193      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d036      	beq.n	8001970 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff f8fe 	bl	8000b10 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff f8fa 	bl	8000b10 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e173      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x234>
 8001936:	e01b      	b.n	8001970 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff f8e7 	bl	8000b10 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	e00e      	b.n	8001964 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff f8e3 	bl	8000b10 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d907      	bls.n	8001964 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e15c      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
 8001958:	40023800 	.word	0x40023800
 800195c:	42470000 	.word	0x42470000
 8001960:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b8a      	ldr	r3, [pc, #552]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ea      	bne.n	8001946 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8097 	beq.w	8001aac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b83      	ldr	r3, [pc, #524]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b7f      	ldr	r3, [pc, #508]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a7e      	ldr	r2, [pc, #504]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	4b79      	ldr	r3, [pc, #484]	@ (8001b94 <HAL_RCC_OscConfig+0x4b0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ba:	4b76      	ldr	r3, [pc, #472]	@ (8001b94 <HAL_RCC_OscConfig+0x4b0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a75      	ldr	r2, [pc, #468]	@ (8001b94 <HAL_RCC_OscConfig+0x4b0>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c6:	f7ff f8a3 	bl	8000b10 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff f89f 	bl	8000b10 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e118      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b94 <HAL_RCC_OscConfig+0x4b0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x31e>
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f8:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0x358>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x340>
 8001a0a:	4b61      	ldr	r3, [pc, #388]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a60      	ldr	r2, [pc, #384]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	4b5e      	ldr	r3, [pc, #376]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x358>
 8001a24:	4b5a      	ldr	r3, [pc, #360]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a59      	ldr	r2, [pc, #356]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a30:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a34:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d015      	beq.n	8001a70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff f864 	bl	8000b10 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f860 	bl	8000b10 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0d7      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a62:	4b4b      	ldr	r3, [pc, #300]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0ee      	beq.n	8001a4c <HAL_RCC_OscConfig+0x368>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f84e 	bl	8000b10 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff f84a 	bl	8000b10 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0c1      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	4b40      	ldr	r3, [pc, #256]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ee      	bne.n	8001a78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80ad 	beq.w	8001c10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d060      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d145      	bne.n	8001b56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b33      	ldr	r3, [pc, #204]	@ (8001b98 <HAL_RCC_OscConfig+0x4b4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f81e 	bl	8000b10 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f81a 	bl	8000b10 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e093      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	071b      	lsls	r3, r3, #28
 8001b22:	491b      	ldr	r1, [pc, #108]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x4b4>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7fe ffef 	bl	8000b10 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7fe ffeb 	bl	8000b10 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e064      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x452>
 8001b54:	e05c      	b.n	8001c10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_RCC_OscConfig+0x4b4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ffd8 	bl	8000b10 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7fe ffd4 	bl	8000b10 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04d      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x480>
 8001b82:	e045      	b.n	8001c10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e040      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000
 8001b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <HAL_RCC_OscConfig+0x538>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d030      	beq.n	8001c0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d129      	bne.n	8001c0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d122      	bne.n	8001c0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d119      	bne.n	8001c0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10f      	bne.n	8001c0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e042      	b.n	8001cb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fe12 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f82b 	bl	8001cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b0c0      	sub	sp, #256	@ 0x100
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cdc:	68d9      	ldr	r1, [r3, #12]
 8001cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	ea40 0301 	orr.w	r3, r0, r1
 8001ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d18:	f021 010c 	bic.w	r1, r1, #12
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d26:	430b      	orrs	r3, r1
 8001d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d3a:	6999      	ldr	r1, [r3, #24]
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	ea40 0301 	orr.w	r3, r0, r1
 8001d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b8f      	ldr	r3, [pc, #572]	@ (8001f8c <UART_SetConfig+0x2cc>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d005      	beq.n	8001d60 <UART_SetConfig+0xa0>
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f90 <UART_SetConfig+0x2d0>)
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d104      	bne.n	8001d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d60:	f7ff fa7c 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 8001d64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d68:	e003      	b.n	8001d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d6a:	f7ff fa63 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8001d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d7c:	f040 810c 	bne.w	8001f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d92:	4622      	mov	r2, r4
 8001d94:	462b      	mov	r3, r5
 8001d96:	1891      	adds	r1, r2, r2
 8001d98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d9a:	415b      	adcs	r3, r3
 8001d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001da2:	4621      	mov	r1, r4
 8001da4:	eb12 0801 	adds.w	r8, r2, r1
 8001da8:	4629      	mov	r1, r5
 8001daa:	eb43 0901 	adc.w	r9, r3, r1
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dc2:	4690      	mov	r8, r2
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	eb18 0303 	adds.w	r3, r8, r3
 8001dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	eb49 0303 	adc.w	r3, r9, r3
 8001dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001de6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001dee:	460b      	mov	r3, r1
 8001df0:	18db      	adds	r3, r3, r3
 8001df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001df4:	4613      	mov	r3, r2
 8001df6:	eb42 0303 	adc.w	r3, r2, r3
 8001dfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e04:	f7fe fa5c 	bl	80002c0 <__aeabi_uldivmod>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4b61      	ldr	r3, [pc, #388]	@ (8001f94 <UART_SetConfig+0x2d4>)
 8001e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	011c      	lsls	r4, r3, #4
 8001e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e28:	4642      	mov	r2, r8
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	1891      	adds	r1, r2, r2
 8001e2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e30:	415b      	adcs	r3, r3
 8001e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e38:	4641      	mov	r1, r8
 8001e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8001e3e:	4649      	mov	r1, r9
 8001e40:	eb43 0b01 	adc.w	fp, r3, r1
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e58:	4692      	mov	sl, r2
 8001e5a:	469b      	mov	fp, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8001e62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e66:	464b      	mov	r3, r9
 8001e68:	eb4b 0303 	adc.w	r3, fp, r3
 8001e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e84:	460b      	mov	r3, r1
 8001e86:	18db      	adds	r3, r3, r3
 8001e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	eb42 0303 	adc.w	r3, r2, r3
 8001e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e9a:	f7fe fa11 	bl	80002c0 <__aeabi_uldivmod>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <UART_SetConfig+0x2d4>)
 8001ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2264      	movs	r2, #100	@ 0x64
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	1acb      	subs	r3, r1, r3
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001eba:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <UART_SetConfig+0x2d4>)
 8001ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ec8:	441c      	add	r4, r3
 8001eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001edc:	4642      	mov	r2, r8
 8001ede:	464b      	mov	r3, r9
 8001ee0:	1891      	adds	r1, r2, r2
 8001ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ee4:	415b      	adcs	r3, r3
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001eec:	4641      	mov	r1, r8
 8001eee:	1851      	adds	r1, r2, r1
 8001ef0:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ef2:	4649      	mov	r1, r9
 8001ef4:	414b      	adcs	r3, r1
 8001ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f04:	4659      	mov	r1, fp
 8001f06:	00cb      	lsls	r3, r1, #3
 8001f08:	4651      	mov	r1, sl
 8001f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f0e:	4651      	mov	r1, sl
 8001f10:	00ca      	lsls	r2, r1, #3
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	4642      	mov	r2, r8
 8001f1a:	189b      	adds	r3, r3, r2
 8001f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f20:	464b      	mov	r3, r9
 8001f22:	460a      	mov	r2, r1
 8001f24:	eb42 0303 	adc.w	r3, r2, r3
 8001f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f40:	460b      	mov	r3, r1
 8001f42:	18db      	adds	r3, r3, r3
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f46:	4613      	mov	r3, r2
 8001f48:	eb42 0303 	adc.w	r3, r2, r3
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f56:	f7fe f9b3 	bl	80002c0 <__aeabi_uldivmod>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <UART_SetConfig+0x2d4>)
 8001f60:	fba3 1302 	umull	r1, r3, r3, r2
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	2164      	movs	r1, #100	@ 0x64
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	3332      	adds	r3, #50	@ 0x32
 8001f72:	4a08      	ldr	r2, [pc, #32]	@ (8001f94 <UART_SetConfig+0x2d4>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	f003 0207 	and.w	r2, r3, #7
 8001f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4422      	add	r2, r4
 8001f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f88:	e106      	b.n	8002198 <UART_SetConfig+0x4d8>
 8001f8a:	bf00      	nop
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40011400 	.word	0x40011400
 8001f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001faa:	4642      	mov	r2, r8
 8001fac:	464b      	mov	r3, r9
 8001fae:	1891      	adds	r1, r2, r2
 8001fb0:	6239      	str	r1, [r7, #32]
 8001fb2:	415b      	adcs	r3, r3
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fba:	4641      	mov	r1, r8
 8001fbc:	1854      	adds	r4, r2, r1
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	eb43 0501 	adc.w	r5, r3, r1
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	00eb      	lsls	r3, r5, #3
 8001fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fd2:	00e2      	lsls	r2, r4, #3
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	4643      	mov	r3, r8
 8001fda:	18e3      	adds	r3, r4, r3
 8001fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fe0:	464b      	mov	r3, r9
 8001fe2:	eb45 0303 	adc.w	r3, r5, r3
 8001fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ff6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002006:	4629      	mov	r1, r5
 8002008:	008b      	lsls	r3, r1, #2
 800200a:	4621      	mov	r1, r4
 800200c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002010:	4621      	mov	r1, r4
 8002012:	008a      	lsls	r2, r1, #2
 8002014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002018:	f7fe f952 	bl	80002c0 <__aeabi_uldivmod>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4b60      	ldr	r3, [pc, #384]	@ (80021a4 <UART_SetConfig+0x4e4>)
 8002022:	fba3 2302 	umull	r2, r3, r3, r2
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	011c      	lsls	r4, r3, #4
 800202a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800202e:	2200      	movs	r2, #0
 8002030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002034:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800203c:	4642      	mov	r2, r8
 800203e:	464b      	mov	r3, r9
 8002040:	1891      	adds	r1, r2, r2
 8002042:	61b9      	str	r1, [r7, #24]
 8002044:	415b      	adcs	r3, r3
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	4641      	mov	r1, r8
 800204e:	1851      	adds	r1, r2, r1
 8002050:	6139      	str	r1, [r7, #16]
 8002052:	4649      	mov	r1, r9
 8002054:	414b      	adcs	r3, r1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002064:	4659      	mov	r1, fp
 8002066:	00cb      	lsls	r3, r1, #3
 8002068:	4651      	mov	r1, sl
 800206a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800206e:	4651      	mov	r1, sl
 8002070:	00ca      	lsls	r2, r1, #3
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	4603      	mov	r3, r0
 8002078:	4642      	mov	r2, r8
 800207a:	189b      	adds	r3, r3, r2
 800207c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002080:	464b      	mov	r3, r9
 8002082:	460a      	mov	r2, r1
 8002084:	eb42 0303 	adc.w	r3, r2, r3
 8002088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002096:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80020a4:	4649      	mov	r1, r9
 80020a6:	008b      	lsls	r3, r1, #2
 80020a8:	4641      	mov	r1, r8
 80020aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020ae:	4641      	mov	r1, r8
 80020b0:	008a      	lsls	r2, r1, #2
 80020b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020b6:	f7fe f903 	bl	80002c0 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	4b38      	ldr	r3, [pc, #224]	@ (80021a4 <UART_SetConfig+0x4e4>)
 80020c2:	fba3 2301 	umull	r2, r3, r3, r1
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2264      	movs	r2, #100	@ 0x64
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	1acb      	subs	r3, r1, r3
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	3332      	adds	r3, #50	@ 0x32
 80020d4:	4a33      	ldr	r2, [pc, #204]	@ (80021a4 <UART_SetConfig+0x4e4>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e0:	441c      	add	r4, r3
 80020e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020e6:	2200      	movs	r2, #0
 80020e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80020ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80020ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80020f0:	4642      	mov	r2, r8
 80020f2:	464b      	mov	r3, r9
 80020f4:	1891      	adds	r1, r2, r2
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	415b      	adcs	r3, r3
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002100:	4641      	mov	r1, r8
 8002102:	1851      	adds	r1, r2, r1
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	4649      	mov	r1, r9
 8002108:	414b      	adcs	r3, r1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002118:	4659      	mov	r1, fp
 800211a:	00cb      	lsls	r3, r1, #3
 800211c:	4651      	mov	r1, sl
 800211e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002122:	4651      	mov	r1, sl
 8002124:	00ca      	lsls	r2, r1, #3
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	4603      	mov	r3, r0
 800212c:	4642      	mov	r2, r8
 800212e:	189b      	adds	r3, r3, r2
 8002130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002132:	464b      	mov	r3, r9
 8002134:	460a      	mov	r2, r1
 8002136:	eb42 0303 	adc.w	r3, r2, r3
 800213a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	663b      	str	r3, [r7, #96]	@ 0x60
 8002146:	667a      	str	r2, [r7, #100]	@ 0x64
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002154:	4649      	mov	r1, r9
 8002156:	008b      	lsls	r3, r1, #2
 8002158:	4641      	mov	r1, r8
 800215a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800215e:	4641      	mov	r1, r8
 8002160:	008a      	lsls	r2, r1, #2
 8002162:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002166:	f7fe f8ab 	bl	80002c0 <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <UART_SetConfig+0x4e4>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	2164      	movs	r1, #100	@ 0x64
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	3332      	adds	r3, #50	@ 0x32
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <UART_SetConfig+0x4e4>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4422      	add	r2, r4
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800219e:	46bd      	mov	sp, r7
 80021a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a4:	51eb851f 	.word	0x51eb851f

080021a8 <findslot>:
 80021a8:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <findslot+0x2c>)
 80021aa:	b510      	push	{r4, lr}
 80021ac:	4604      	mov	r4, r0
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	b118      	cbz	r0, 80021ba <findslot+0x12>
 80021b2:	6a03      	ldr	r3, [r0, #32]
 80021b4:	b90b      	cbnz	r3, 80021ba <findslot+0x12>
 80021b6:	f000 fb19 	bl	80027ec <__sinit>
 80021ba:	2c13      	cmp	r4, #19
 80021bc:	d807      	bhi.n	80021ce <findslot+0x26>
 80021be:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <findslot+0x30>)
 80021c0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80021c4:	3201      	adds	r2, #1
 80021c6:	d002      	beq.n	80021ce <findslot+0x26>
 80021c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	2000      	movs	r0, #0
 80021d0:	e7fc      	b.n	80021cc <findslot+0x24>
 80021d2:	bf00      	nop
 80021d4:	20000020 	.word	0x20000020
 80021d8:	200000e8 	.word	0x200000e8

080021dc <error>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	4604      	mov	r4, r0
 80021e0:	f000 fcea 	bl	8002bb8 <__errno>
 80021e4:	2613      	movs	r6, #19
 80021e6:	4605      	mov	r5, r0
 80021e8:	2700      	movs	r7, #0
 80021ea:	4630      	mov	r0, r6
 80021ec:	4639      	mov	r1, r7
 80021ee:	beab      	bkpt	0x00ab
 80021f0:	4606      	mov	r6, r0
 80021f2:	602e      	str	r6, [r5, #0]
 80021f4:	4620      	mov	r0, r4
 80021f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021f8 <checkerror>:
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d101      	bne.n	8002200 <checkerror+0x8>
 80021fc:	f7ff bfee 	b.w	80021dc <error>
 8002200:	4770      	bx	lr

08002202 <_swiread>:
 8002202:	b530      	push	{r4, r5, lr}
 8002204:	b085      	sub	sp, #20
 8002206:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800220a:	9203      	str	r2, [sp, #12]
 800220c:	2406      	movs	r4, #6
 800220e:	ad01      	add	r5, sp, #4
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	beab      	bkpt	0x00ab
 8002216:	4604      	mov	r4, r0
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff ffed 	bl	80021f8 <checkerror>
 800221e:	b005      	add	sp, #20
 8002220:	bd30      	pop	{r4, r5, pc}

08002222 <_read>:
 8002222:	b570      	push	{r4, r5, r6, lr}
 8002224:	460e      	mov	r6, r1
 8002226:	4614      	mov	r4, r2
 8002228:	f7ff ffbe 	bl	80021a8 <findslot>
 800222c:	4605      	mov	r5, r0
 800222e:	b930      	cbnz	r0, 800223e <_read+0x1c>
 8002230:	f000 fcc2 	bl	8002bb8 <__errno>
 8002234:	2309      	movs	r3, #9
 8002236:	6003      	str	r3, [r0, #0]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	6800      	ldr	r0, [r0, #0]
 8002240:	4622      	mov	r2, r4
 8002242:	4631      	mov	r1, r6
 8002244:	f7ff ffdd 	bl	8002202 <_swiread>
 8002248:	1c43      	adds	r3, r0, #1
 800224a:	d0f5      	beq.n	8002238 <_read+0x16>
 800224c:	686b      	ldr	r3, [r5, #4]
 800224e:	1a20      	subs	r0, r4, r0
 8002250:	4403      	add	r3, r0
 8002252:	606b      	str	r3, [r5, #4]
 8002254:	e7f2      	b.n	800223c <_read+0x1a>

08002256 <_swilseek>:
 8002256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002258:	460c      	mov	r4, r1
 800225a:	4616      	mov	r6, r2
 800225c:	f7ff ffa4 	bl	80021a8 <findslot>
 8002260:	4605      	mov	r5, r0
 8002262:	b940      	cbnz	r0, 8002276 <_swilseek+0x20>
 8002264:	f000 fca8 	bl	8002bb8 <__errno>
 8002268:	2309      	movs	r3, #9
 800226a:	6003      	str	r3, [r0, #0]
 800226c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002270:	4620      	mov	r0, r4
 8002272:	b003      	add	sp, #12
 8002274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002276:	2e02      	cmp	r6, #2
 8002278:	d903      	bls.n	8002282 <_swilseek+0x2c>
 800227a:	f000 fc9d 	bl	8002bb8 <__errno>
 800227e:	2316      	movs	r3, #22
 8002280:	e7f3      	b.n	800226a <_swilseek+0x14>
 8002282:	2e01      	cmp	r6, #1
 8002284:	d112      	bne.n	80022ac <_swilseek+0x56>
 8002286:	6843      	ldr	r3, [r0, #4]
 8002288:	18e4      	adds	r4, r4, r3
 800228a:	d4f6      	bmi.n	800227a <_swilseek+0x24>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	260a      	movs	r6, #10
 8002290:	e9cd 3400 	strd	r3, r4, [sp]
 8002294:	466f      	mov	r7, sp
 8002296:	4630      	mov	r0, r6
 8002298:	4639      	mov	r1, r7
 800229a:	beab      	bkpt	0x00ab
 800229c:	4606      	mov	r6, r0
 800229e:	4630      	mov	r0, r6
 80022a0:	f7ff ffaa 	bl	80021f8 <checkerror>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	dbe1      	blt.n	800226c <_swilseek+0x16>
 80022a8:	606c      	str	r4, [r5, #4]
 80022aa:	e7e1      	b.n	8002270 <_swilseek+0x1a>
 80022ac:	2e02      	cmp	r6, #2
 80022ae:	6803      	ldr	r3, [r0, #0]
 80022b0:	d1ec      	bne.n	800228c <_swilseek+0x36>
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	260c      	movs	r6, #12
 80022b6:	466f      	mov	r7, sp
 80022b8:	4630      	mov	r0, r6
 80022ba:	4639      	mov	r1, r7
 80022bc:	beab      	bkpt	0x00ab
 80022be:	4606      	mov	r6, r0
 80022c0:	4630      	mov	r0, r6
 80022c2:	f7ff ff99 	bl	80021f8 <checkerror>
 80022c6:	1c43      	adds	r3, r0, #1
 80022c8:	d0d0      	beq.n	800226c <_swilseek+0x16>
 80022ca:	4404      	add	r4, r0
 80022cc:	e7de      	b.n	800228c <_swilseek+0x36>

080022ce <_lseek>:
 80022ce:	f7ff bfc2 	b.w	8002256 <_swilseek>

080022d2 <_swiwrite>:
 80022d2:	b530      	push	{r4, r5, lr}
 80022d4:	b085      	sub	sp, #20
 80022d6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80022da:	9203      	str	r2, [sp, #12]
 80022dc:	2405      	movs	r4, #5
 80022de:	ad01      	add	r5, sp, #4
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	beab      	bkpt	0x00ab
 80022e6:	4604      	mov	r4, r0
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff ff85 	bl	80021f8 <checkerror>
 80022ee:	b005      	add	sp, #20
 80022f0:	bd30      	pop	{r4, r5, pc}

080022f2 <_write>:
 80022f2:	b570      	push	{r4, r5, r6, lr}
 80022f4:	460e      	mov	r6, r1
 80022f6:	4615      	mov	r5, r2
 80022f8:	f7ff ff56 	bl	80021a8 <findslot>
 80022fc:	4604      	mov	r4, r0
 80022fe:	b930      	cbnz	r0, 800230e <_write+0x1c>
 8002300:	f000 fc5a 	bl	8002bb8 <__errno>
 8002304:	2309      	movs	r3, #9
 8002306:	6003      	str	r3, [r0, #0]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	6800      	ldr	r0, [r0, #0]
 8002310:	462a      	mov	r2, r5
 8002312:	4631      	mov	r1, r6
 8002314:	f7ff ffdd 	bl	80022d2 <_swiwrite>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	dbf5      	blt.n	8002308 <_write+0x16>
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	1ae8      	subs	r0, r5, r3
 8002320:	4402      	add	r2, r0
 8002322:	42ab      	cmp	r3, r5
 8002324:	6062      	str	r2, [r4, #4]
 8002326:	d1f1      	bne.n	800230c <_write+0x1a>
 8002328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800232c:	2000      	movs	r0, #0
 800232e:	f7ff bf55 	b.w	80021dc <error>

08002332 <_swiclose>:
 8002332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002334:	2402      	movs	r4, #2
 8002336:	9001      	str	r0, [sp, #4]
 8002338:	ad01      	add	r5, sp, #4
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	beab      	bkpt	0x00ab
 8002340:	4604      	mov	r4, r0
 8002342:	4620      	mov	r0, r4
 8002344:	f7ff ff58 	bl	80021f8 <checkerror>
 8002348:	b003      	add	sp, #12
 800234a:	bd30      	pop	{r4, r5, pc}

0800234c <_close>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4605      	mov	r5, r0
 8002350:	f7ff ff2a 	bl	80021a8 <findslot>
 8002354:	4604      	mov	r4, r0
 8002356:	b930      	cbnz	r0, 8002366 <_close+0x1a>
 8002358:	f000 fc2e 	bl	8002bb8 <__errno>
 800235c:	2309      	movs	r3, #9
 800235e:	6003      	str	r3, [r0, #0]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002364:	bd38      	pop	{r3, r4, r5, pc}
 8002366:	3d01      	subs	r5, #1
 8002368:	2d01      	cmp	r5, #1
 800236a:	d809      	bhi.n	8002380 <_close+0x34>
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <_close+0x40>)
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	429a      	cmp	r2, r3
 8002374:	d104      	bne.n	8002380 <_close+0x34>
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800237a:	6023      	str	r3, [r4, #0]
 800237c:	2000      	movs	r0, #0
 800237e:	e7f1      	b.n	8002364 <_close+0x18>
 8002380:	6820      	ldr	r0, [r4, #0]
 8002382:	f7ff ffd6 	bl	8002332 <_swiclose>
 8002386:	2800      	cmp	r0, #0
 8002388:	d0f5      	beq.n	8002376 <_close+0x2a>
 800238a:	e7eb      	b.n	8002364 <_close+0x18>
 800238c:	200000e8 	.word	0x200000e8

08002390 <_swistat>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	460c      	mov	r4, r1
 8002394:	f7ff ff08 	bl	80021a8 <findslot>
 8002398:	4605      	mov	r5, r0
 800239a:	b930      	cbnz	r0, 80023aa <_swistat+0x1a>
 800239c:	f000 fc0c 	bl	8002bb8 <__errno>
 80023a0:	2309      	movs	r3, #9
 80023a2:	6003      	str	r3, [r0, #0]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023b0:	6063      	str	r3, [r4, #4]
 80023b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023b6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80023b8:	260c      	movs	r6, #12
 80023ba:	4630      	mov	r0, r6
 80023bc:	4629      	mov	r1, r5
 80023be:	beab      	bkpt	0x00ab
 80023c0:	4605      	mov	r5, r0
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff ff18 	bl	80021f8 <checkerror>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d0eb      	beq.n	80023a4 <_swistat+0x14>
 80023cc:	6120      	str	r0, [r4, #16]
 80023ce:	2000      	movs	r0, #0
 80023d0:	e7ea      	b.n	80023a8 <_swistat+0x18>

080023d2 <_fstat>:
 80023d2:	460b      	mov	r3, r1
 80023d4:	b510      	push	{r4, lr}
 80023d6:	2100      	movs	r1, #0
 80023d8:	4604      	mov	r4, r0
 80023da:	2258      	movs	r2, #88	@ 0x58
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fb9d 	bl	8002b1c <memset>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4620      	mov	r0, r4
 80023e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ea:	f7ff bfd1 	b.w	8002390 <_swistat>

080023ee <_stat>:
 80023ee:	b538      	push	{r3, r4, r5, lr}
 80023f0:	460d      	mov	r5, r1
 80023f2:	4604      	mov	r4, r0
 80023f4:	2258      	movs	r2, #88	@ 0x58
 80023f6:	2100      	movs	r1, #0
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 fb8f 	bl	8002b1c <memset>
 80023fe:	4620      	mov	r0, r4
 8002400:	2100      	movs	r1, #0
 8002402:	f000 f811 	bl	8002428 <_swiopen>
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	4604      	mov	r4, r0
 800240a:	d00b      	beq.n	8002424 <_stat+0x36>
 800240c:	686b      	ldr	r3, [r5, #4]
 800240e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002412:	606b      	str	r3, [r5, #4]
 8002414:	4629      	mov	r1, r5
 8002416:	f7ff ffbb 	bl	8002390 <_swistat>
 800241a:	4605      	mov	r5, r0
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff ff95 	bl	800234c <_close>
 8002422:	462c      	mov	r4, r5
 8002424:	4620      	mov	r0, r4
 8002426:	bd38      	pop	{r3, r4, r5, pc}

08002428 <_swiopen>:
 8002428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	4f29      	ldr	r7, [pc, #164]	@ (80024d4 <_swiopen+0xac>)
 800242e:	b096      	sub	sp, #88	@ 0x58
 8002430:	4682      	mov	sl, r0
 8002432:	460e      	mov	r6, r1
 8002434:	2400      	movs	r4, #0
 8002436:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800243a:	3301      	adds	r3, #1
 800243c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002440:	d00c      	beq.n	800245c <_swiopen+0x34>
 8002442:	3401      	adds	r4, #1
 8002444:	2c14      	cmp	r4, #20
 8002446:	d1f6      	bne.n	8002436 <_swiopen+0xe>
 8002448:	f000 fbb6 	bl	8002bb8 <__errno>
 800244c:	2318      	movs	r3, #24
 800244e:	6003      	str	r3, [r0, #0]
 8002450:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002454:	4620      	mov	r0, r4
 8002456:	b016      	add	sp, #88	@ 0x58
 8002458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800245c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002460:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002464:	46e9      	mov	r9, sp
 8002466:	d109      	bne.n	800247c <_swiopen+0x54>
 8002468:	4649      	mov	r1, r9
 800246a:	4650      	mov	r0, sl
 800246c:	f7ff ffbf 	bl	80023ee <_stat>
 8002470:	3001      	adds	r0, #1
 8002472:	d003      	beq.n	800247c <_swiopen+0x54>
 8002474:	f000 fba0 	bl	8002bb8 <__errno>
 8002478:	2311      	movs	r3, #17
 800247a:	e7e8      	b.n	800244e <_swiopen+0x26>
 800247c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002480:	f240 6301 	movw	r3, #1537	@ 0x601
 8002484:	07b2      	lsls	r2, r6, #30
 8002486:	bf48      	it	mi
 8002488:	f045 0502 	orrmi.w	r5, r5, #2
 800248c:	421e      	tst	r6, r3
 800248e:	bf18      	it	ne
 8002490:	f045 0504 	orrne.w	r5, r5, #4
 8002494:	0733      	lsls	r3, r6, #28
 8002496:	bf48      	it	mi
 8002498:	f025 0504 	bicmi.w	r5, r5, #4
 800249c:	4650      	mov	r0, sl
 800249e:	bf48      	it	mi
 80024a0:	f045 0508 	orrmi.w	r5, r5, #8
 80024a4:	f8cd a000 	str.w	sl, [sp]
 80024a8:	f7fd feb2 	bl	8000210 <strlen>
 80024ac:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80024b0:	2501      	movs	r5, #1
 80024b2:	4628      	mov	r0, r5
 80024b4:	4649      	mov	r1, r9
 80024b6:	beab      	bkpt	0x00ab
 80024b8:	4605      	mov	r5, r0
 80024ba:	2d00      	cmp	r5, #0
 80024bc:	db05      	blt.n	80024ca <_swiopen+0xa2>
 80024be:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80024c2:	4447      	add	r7, r8
 80024c4:	2300      	movs	r3, #0
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	e7c4      	b.n	8002454 <_swiopen+0x2c>
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7ff fe86 	bl	80021dc <error>
 80024d0:	4604      	mov	r4, r0
 80024d2:	e7bf      	b.n	8002454 <_swiopen+0x2c>
 80024d4:	200000e8 	.word	0x200000e8

080024d8 <_get_semihosting_exts>:
 80024d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80024dc:	4606      	mov	r6, r0
 80024de:	460f      	mov	r7, r1
 80024e0:	4829      	ldr	r0, [pc, #164]	@ (8002588 <_get_semihosting_exts+0xb0>)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4615      	mov	r5, r2
 80024e6:	f7ff ff9f 	bl	8002428 <_swiopen>
 80024ea:	462a      	mov	r2, r5
 80024ec:	4604      	mov	r4, r0
 80024ee:	2100      	movs	r1, #0
 80024f0:	4630      	mov	r0, r6
 80024f2:	f000 fb13 	bl	8002b1c <memset>
 80024f6:	1c63      	adds	r3, r4, #1
 80024f8:	d014      	beq.n	8002524 <_get_semihosting_exts+0x4c>
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff fe54 	bl	80021a8 <findslot>
 8002500:	f04f 080c 	mov.w	r8, #12
 8002504:	4681      	mov	r9, r0
 8002506:	4640      	mov	r0, r8
 8002508:	4649      	mov	r1, r9
 800250a:	beab      	bkpt	0x00ab
 800250c:	4680      	mov	r8, r0
 800250e:	4640      	mov	r0, r8
 8002510:	f7ff fe72 	bl	80021f8 <checkerror>
 8002514:	2803      	cmp	r0, #3
 8002516:	dd02      	ble.n	800251e <_get_semihosting_exts+0x46>
 8002518:	1ec3      	subs	r3, r0, #3
 800251a:	42ab      	cmp	r3, r5
 800251c:	dc07      	bgt.n	800252e <_get_semihosting_exts+0x56>
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff ff14 	bl	800234c <_close>
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002528:	b003      	add	sp, #12
 800252a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800252e:	2204      	movs	r2, #4
 8002530:	eb0d 0102 	add.w	r1, sp, r2
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff fe74 	bl	8002222 <_read>
 800253a:	2803      	cmp	r0, #3
 800253c:	ddef      	ble.n	800251e <_get_semihosting_exts+0x46>
 800253e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002542:	2b53      	cmp	r3, #83	@ 0x53
 8002544:	d1eb      	bne.n	800251e <_get_semihosting_exts+0x46>
 8002546:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800254a:	2b48      	cmp	r3, #72	@ 0x48
 800254c:	d1e7      	bne.n	800251e <_get_semihosting_exts+0x46>
 800254e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002552:	2b46      	cmp	r3, #70	@ 0x46
 8002554:	d1e3      	bne.n	800251e <_get_semihosting_exts+0x46>
 8002556:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800255a:	2b42      	cmp	r3, #66	@ 0x42
 800255c:	d1df      	bne.n	800251e <_get_semihosting_exts+0x46>
 800255e:	2201      	movs	r2, #1
 8002560:	4639      	mov	r1, r7
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff fe77 	bl	8002256 <_swilseek>
 8002568:	2800      	cmp	r0, #0
 800256a:	dbd8      	blt.n	800251e <_get_semihosting_exts+0x46>
 800256c:	462a      	mov	r2, r5
 800256e:	4631      	mov	r1, r6
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff fe56 	bl	8002222 <_read>
 8002576:	4605      	mov	r5, r0
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff fee7 	bl	800234c <_close>
 800257e:	4628      	mov	r0, r5
 8002580:	f7ff fe3a 	bl	80021f8 <checkerror>
 8002584:	e7d0      	b.n	8002528 <_get_semihosting_exts+0x50>
 8002586:	bf00      	nop
 8002588:	08004244 	.word	0x08004244

0800258c <initialise_semihosting_exts>:
 800258c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800258e:	4d0a      	ldr	r5, [pc, #40]	@ (80025b8 <initialise_semihosting_exts+0x2c>)
 8002590:	4c0a      	ldr	r4, [pc, #40]	@ (80025bc <initialise_semihosting_exts+0x30>)
 8002592:	2100      	movs	r1, #0
 8002594:	2201      	movs	r2, #1
 8002596:	a801      	add	r0, sp, #4
 8002598:	6029      	str	r1, [r5, #0]
 800259a:	6022      	str	r2, [r4, #0]
 800259c:	f7ff ff9c 	bl	80024d8 <_get_semihosting_exts>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	dd07      	ble.n	80025b4 <initialise_semihosting_exts+0x28>
 80025a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025a8:	f003 0201 	and.w	r2, r3, #1
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	602a      	str	r2, [r5, #0]
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	b003      	add	sp, #12
 80025b6:	bd30      	pop	{r4, r5, pc}
 80025b8:	20000010 	.word	0x20000010
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <_has_ext_stdout_stderr>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4c04      	ldr	r4, [pc, #16]	@ (80025d4 <_has_ext_stdout_stderr+0x14>)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da01      	bge.n	80025ce <_has_ext_stdout_stderr+0xe>
 80025ca:	f7ff ffdf 	bl	800258c <initialise_semihosting_exts>
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	bd10      	pop	{r4, pc}
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <initialise_monitor_handles>:
 80025d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	b085      	sub	sp, #20
 80025de:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002690 <initialise_monitor_handles+0xb8>
 80025e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80025e6:	2303      	movs	r3, #3
 80025e8:	2400      	movs	r4, #0
 80025ea:	9303      	str	r3, [sp, #12]
 80025ec:	af01      	add	r7, sp, #4
 80025ee:	9402      	str	r4, [sp, #8]
 80025f0:	2501      	movs	r5, #1
 80025f2:	4628      	mov	r0, r5
 80025f4:	4639      	mov	r1, r7
 80025f6:	beab      	bkpt	0x00ab
 80025f8:	4605      	mov	r5, r0
 80025fa:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002694 <initialise_monitor_handles+0xbc>
 80025fe:	4623      	mov	r3, r4
 8002600:	4c20      	ldr	r4, [pc, #128]	@ (8002684 <initialise_monitor_handles+0xac>)
 8002602:	f8c8 5000 	str.w	r5, [r8]
 8002606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800260a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800260e:	3301      	adds	r3, #1
 8002610:	2b14      	cmp	r3, #20
 8002612:	d1fa      	bne.n	800260a <initialise_monitor_handles+0x32>
 8002614:	f7ff ffd4 	bl	80025c0 <_has_ext_stdout_stderr>
 8002618:	4d1b      	ldr	r5, [pc, #108]	@ (8002688 <initialise_monitor_handles+0xb0>)
 800261a:	b1d0      	cbz	r0, 8002652 <initialise_monitor_handles+0x7a>
 800261c:	f04f 0a03 	mov.w	sl, #3
 8002620:	2304      	movs	r3, #4
 8002622:	f8cd 9004 	str.w	r9, [sp, #4]
 8002626:	2601      	movs	r6, #1
 8002628:	f8cd a00c 	str.w	sl, [sp, #12]
 800262c:	9302      	str	r3, [sp, #8]
 800262e:	4630      	mov	r0, r6
 8002630:	4639      	mov	r1, r7
 8002632:	beab      	bkpt	0x00ab
 8002634:	4683      	mov	fp, r0
 8002636:	4b15      	ldr	r3, [pc, #84]	@ (800268c <initialise_monitor_handles+0xb4>)
 8002638:	f8cd 9004 	str.w	r9, [sp, #4]
 800263c:	f8c3 b000 	str.w	fp, [r3]
 8002640:	2308      	movs	r3, #8
 8002642:	f8cd a00c 	str.w	sl, [sp, #12]
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	4630      	mov	r0, r6
 800264a:	4639      	mov	r1, r7
 800264c:	beab      	bkpt	0x00ab
 800264e:	4606      	mov	r6, r0
 8002650:	602e      	str	r6, [r5, #0]
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	bf02      	ittt	eq
 8002658:	4b0c      	ldreq	r3, [pc, #48]	@ (800268c <initialise_monitor_handles+0xb4>)
 800265a:	681b      	ldreq	r3, [r3, #0]
 800265c:	602b      	streq	r3, [r5, #0]
 800265e:	2600      	movs	r6, #0
 8002660:	f8d8 3000 	ldr.w	r3, [r8]
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	6066      	str	r6, [r4, #4]
 8002668:	f7ff ffaa 	bl	80025c0 <_has_ext_stdout_stderr>
 800266c:	b130      	cbz	r0, 800267c <initialise_monitor_handles+0xa4>
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <initialise_monitor_handles+0xb4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800267c:	b005      	add	sp, #20
 800267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002682:	bf00      	nop
 8002684:	200000e8 	.word	0x200000e8
 8002688:	200000dc 	.word	0x200000dc
 800268c:	200000e0 	.word	0x200000e0
 8002690:	0800425a 	.word	0x0800425a
 8002694:	200000e4 	.word	0x200000e4

08002698 <_isatty>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	f7ff fd85 	bl	80021a8 <findslot>
 800269e:	2409      	movs	r4, #9
 80026a0:	4605      	mov	r5, r0
 80026a2:	b920      	cbnz	r0, 80026ae <_isatty+0x16>
 80026a4:	f000 fa88 	bl	8002bb8 <__errno>
 80026a8:	6004      	str	r4, [r0, #0]
 80026aa:	2000      	movs	r0, #0
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	beab      	bkpt	0x00ab
 80026b4:	4604      	mov	r4, r0
 80026b6:	2c01      	cmp	r4, #1
 80026b8:	4620      	mov	r0, r4
 80026ba:	d0f7      	beq.n	80026ac <_isatty+0x14>
 80026bc:	f000 fa7c 	bl	8002bb8 <__errno>
 80026c0:	2513      	movs	r5, #19
 80026c2:	4604      	mov	r4, r0
 80026c4:	2600      	movs	r6, #0
 80026c6:	4628      	mov	r0, r5
 80026c8:	4631      	mov	r1, r6
 80026ca:	beab      	bkpt	0x00ab
 80026cc:	4605      	mov	r5, r0
 80026ce:	6025      	str	r5, [r4, #0]
 80026d0:	e7eb      	b.n	80026aa <_isatty+0x12>
	...

080026d4 <std>:
 80026d4:	2300      	movs	r3, #0
 80026d6:	b510      	push	{r4, lr}
 80026d8:	4604      	mov	r4, r0
 80026da:	e9c0 3300 	strd	r3, r3, [r0]
 80026de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026e2:	6083      	str	r3, [r0, #8]
 80026e4:	8181      	strh	r1, [r0, #12]
 80026e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80026e8:	81c2      	strh	r2, [r0, #14]
 80026ea:	6183      	str	r3, [r0, #24]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2208      	movs	r2, #8
 80026f0:	305c      	adds	r0, #92	@ 0x5c
 80026f2:	f000 fa13 	bl	8002b1c <memset>
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <std+0x58>)
 80026f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <std+0x5c>)
 80026fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <std+0x60>)
 8002700:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <std+0x64>)
 8002704:	6323      	str	r3, [r4, #48]	@ 0x30
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <std+0x68>)
 8002708:	6224      	str	r4, [r4, #32]
 800270a:	429c      	cmp	r4, r3
 800270c:	d006      	beq.n	800271c <std+0x48>
 800270e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002712:	4294      	cmp	r4, r2
 8002714:	d002      	beq.n	800271c <std+0x48>
 8002716:	33d0      	adds	r3, #208	@ 0xd0
 8002718:	429c      	cmp	r4, r3
 800271a:	d105      	bne.n	8002728 <std+0x54>
 800271c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002724:	f000 ba72 	b.w	8002c0c <__retarget_lock_init_recursive>
 8002728:	bd10      	pop	{r4, pc}
 800272a:	bf00      	nop
 800272c:	0800296d 	.word	0x0800296d
 8002730:	0800298f 	.word	0x0800298f
 8002734:	080029c7 	.word	0x080029c7
 8002738:	080029eb 	.word	0x080029eb
 800273c:	20000188 	.word	0x20000188

08002740 <stdio_exit_handler>:
 8002740:	4a02      	ldr	r2, [pc, #8]	@ (800274c <stdio_exit_handler+0xc>)
 8002742:	4903      	ldr	r1, [pc, #12]	@ (8002750 <stdio_exit_handler+0x10>)
 8002744:	4803      	ldr	r0, [pc, #12]	@ (8002754 <stdio_exit_handler+0x14>)
 8002746:	f000 b869 	b.w	800281c <_fwalk_sglue>
 800274a:	bf00      	nop
 800274c:	20000014 	.word	0x20000014
 8002750:	08003aa9 	.word	0x08003aa9
 8002754:	20000024 	.word	0x20000024

08002758 <cleanup_stdio>:
 8002758:	6841      	ldr	r1, [r0, #4]
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <cleanup_stdio+0x34>)
 800275c:	4299      	cmp	r1, r3
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
 8002762:	d001      	beq.n	8002768 <cleanup_stdio+0x10>
 8002764:	f001 f9a0 	bl	8003aa8 <_fflush_r>
 8002768:	68a1      	ldr	r1, [r4, #8]
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <cleanup_stdio+0x38>)
 800276c:	4299      	cmp	r1, r3
 800276e:	d002      	beq.n	8002776 <cleanup_stdio+0x1e>
 8002770:	4620      	mov	r0, r4
 8002772:	f001 f999 	bl	8003aa8 <_fflush_r>
 8002776:	68e1      	ldr	r1, [r4, #12]
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <cleanup_stdio+0x3c>)
 800277a:	4299      	cmp	r1, r3
 800277c:	d004      	beq.n	8002788 <cleanup_stdio+0x30>
 800277e:	4620      	mov	r0, r4
 8002780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002784:	f001 b990 	b.w	8003aa8 <_fflush_r>
 8002788:	bd10      	pop	{r4, pc}
 800278a:	bf00      	nop
 800278c:	20000188 	.word	0x20000188
 8002790:	200001f0 	.word	0x200001f0
 8002794:	20000258 	.word	0x20000258

08002798 <global_stdio_init.part.0>:
 8002798:	b510      	push	{r4, lr}
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <global_stdio_init.part.0+0x30>)
 800279c:	4c0b      	ldr	r4, [pc, #44]	@ (80027cc <global_stdio_init.part.0+0x34>)
 800279e:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <global_stdio_init.part.0+0x38>)
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4620      	mov	r0, r4
 80027a4:	2200      	movs	r2, #0
 80027a6:	2104      	movs	r1, #4
 80027a8:	f7ff ff94 	bl	80026d4 <std>
 80027ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027b0:	2201      	movs	r2, #1
 80027b2:	2109      	movs	r1, #9
 80027b4:	f7ff ff8e 	bl	80026d4 <std>
 80027b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80027bc:	2202      	movs	r2, #2
 80027be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c2:	2112      	movs	r1, #18
 80027c4:	f7ff bf86 	b.w	80026d4 <std>
 80027c8:	200002c0 	.word	0x200002c0
 80027cc:	20000188 	.word	0x20000188
 80027d0:	08002741 	.word	0x08002741

080027d4 <__sfp_lock_acquire>:
 80027d4:	4801      	ldr	r0, [pc, #4]	@ (80027dc <__sfp_lock_acquire+0x8>)
 80027d6:	f000 ba1a 	b.w	8002c0e <__retarget_lock_acquire_recursive>
 80027da:	bf00      	nop
 80027dc:	200002c9 	.word	0x200002c9

080027e0 <__sfp_lock_release>:
 80027e0:	4801      	ldr	r0, [pc, #4]	@ (80027e8 <__sfp_lock_release+0x8>)
 80027e2:	f000 ba15 	b.w	8002c10 <__retarget_lock_release_recursive>
 80027e6:	bf00      	nop
 80027e8:	200002c9 	.word	0x200002c9

080027ec <__sinit>:
 80027ec:	b510      	push	{r4, lr}
 80027ee:	4604      	mov	r4, r0
 80027f0:	f7ff fff0 	bl	80027d4 <__sfp_lock_acquire>
 80027f4:	6a23      	ldr	r3, [r4, #32]
 80027f6:	b11b      	cbz	r3, 8002800 <__sinit+0x14>
 80027f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027fc:	f7ff bff0 	b.w	80027e0 <__sfp_lock_release>
 8002800:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <__sinit+0x28>)
 8002802:	6223      	str	r3, [r4, #32]
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <__sinit+0x2c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f5      	bne.n	80027f8 <__sinit+0xc>
 800280c:	f7ff ffc4 	bl	8002798 <global_stdio_init.part.0>
 8002810:	e7f2      	b.n	80027f8 <__sinit+0xc>
 8002812:	bf00      	nop
 8002814:	08002759 	.word	0x08002759
 8002818:	200002c0 	.word	0x200002c0

0800281c <_fwalk_sglue>:
 800281c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002820:	4607      	mov	r7, r0
 8002822:	4688      	mov	r8, r1
 8002824:	4614      	mov	r4, r2
 8002826:	2600      	movs	r6, #0
 8002828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800282c:	f1b9 0901 	subs.w	r9, r9, #1
 8002830:	d505      	bpl.n	800283e <_fwalk_sglue+0x22>
 8002832:	6824      	ldr	r4, [r4, #0]
 8002834:	2c00      	cmp	r4, #0
 8002836:	d1f7      	bne.n	8002828 <_fwalk_sglue+0xc>
 8002838:	4630      	mov	r0, r6
 800283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800283e:	89ab      	ldrh	r3, [r5, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d907      	bls.n	8002854 <_fwalk_sglue+0x38>
 8002844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002848:	3301      	adds	r3, #1
 800284a:	d003      	beq.n	8002854 <_fwalk_sglue+0x38>
 800284c:	4629      	mov	r1, r5
 800284e:	4638      	mov	r0, r7
 8002850:	47c0      	blx	r8
 8002852:	4306      	orrs	r6, r0
 8002854:	3568      	adds	r5, #104	@ 0x68
 8002856:	e7e9      	b.n	800282c <_fwalk_sglue+0x10>

08002858 <iprintf>:
 8002858:	b40f      	push	{r0, r1, r2, r3}
 800285a:	b507      	push	{r0, r1, r2, lr}
 800285c:	4906      	ldr	r1, [pc, #24]	@ (8002878 <iprintf+0x20>)
 800285e:	ab04      	add	r3, sp, #16
 8002860:	6808      	ldr	r0, [r1, #0]
 8002862:	f853 2b04 	ldr.w	r2, [r3], #4
 8002866:	6881      	ldr	r1, [r0, #8]
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	f000 faf5 	bl	8002e58 <_vfiprintf_r>
 800286e:	b003      	add	sp, #12
 8002870:	f85d eb04 	ldr.w	lr, [sp], #4
 8002874:	b004      	add	sp, #16
 8002876:	4770      	bx	lr
 8002878:	20000020 	.word	0x20000020

0800287c <putchar>:
 800287c:	4b02      	ldr	r3, [pc, #8]	@ (8002888 <putchar+0xc>)
 800287e:	4601      	mov	r1, r0
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	6882      	ldr	r2, [r0, #8]
 8002884:	f001 b99a 	b.w	8003bbc <_putc_r>
 8002888:	20000020 	.word	0x20000020

0800288c <_puts_r>:
 800288c:	6a03      	ldr	r3, [r0, #32]
 800288e:	b570      	push	{r4, r5, r6, lr}
 8002890:	6884      	ldr	r4, [r0, #8]
 8002892:	4605      	mov	r5, r0
 8002894:	460e      	mov	r6, r1
 8002896:	b90b      	cbnz	r3, 800289c <_puts_r+0x10>
 8002898:	f7ff ffa8 	bl	80027ec <__sinit>
 800289c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800289e:	07db      	lsls	r3, r3, #31
 80028a0:	d405      	bmi.n	80028ae <_puts_r+0x22>
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	0598      	lsls	r0, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_puts_r+0x22>
 80028a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028aa:	f000 f9b0 	bl	8002c0e <__retarget_lock_acquire_recursive>
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	0719      	lsls	r1, r3, #28
 80028b2:	d502      	bpl.n	80028ba <_puts_r+0x2e>
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d135      	bne.n	8002926 <_puts_r+0x9a>
 80028ba:	4621      	mov	r1, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	f000 f8d7 	bl	8002a70 <__swsetup_r>
 80028c2:	b380      	cbz	r0, 8002926 <_puts_r+0x9a>
 80028c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80028c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028ca:	07da      	lsls	r2, r3, #31
 80028cc:	d405      	bmi.n	80028da <_puts_r+0x4e>
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	059b      	lsls	r3, r3, #22
 80028d2:	d402      	bmi.n	80028da <_puts_r+0x4e>
 80028d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028d6:	f000 f99b 	bl	8002c10 <__retarget_lock_release_recursive>
 80028da:	4628      	mov	r0, r5
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da04      	bge.n	80028ec <_puts_r+0x60>
 80028e2:	69a2      	ldr	r2, [r4, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	dc17      	bgt.n	8002918 <_puts_r+0x8c>
 80028e8:	290a      	cmp	r1, #10
 80028ea:	d015      	beq.n	8002918 <_puts_r+0x8c>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	6022      	str	r2, [r4, #0]
 80028f2:	7019      	strb	r1, [r3, #0]
 80028f4:	68a3      	ldr	r3, [r4, #8]
 80028f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028fa:	3b01      	subs	r3, #1
 80028fc:	60a3      	str	r3, [r4, #8]
 80028fe:	2900      	cmp	r1, #0
 8002900:	d1ed      	bne.n	80028de <_puts_r+0x52>
 8002902:	2b00      	cmp	r3, #0
 8002904:	da11      	bge.n	800292a <_puts_r+0x9e>
 8002906:	4622      	mov	r2, r4
 8002908:	210a      	movs	r1, #10
 800290a:	4628      	mov	r0, r5
 800290c:	f000 f871 	bl	80029f2 <__swbuf_r>
 8002910:	3001      	adds	r0, #1
 8002912:	d0d7      	beq.n	80028c4 <_puts_r+0x38>
 8002914:	250a      	movs	r5, #10
 8002916:	e7d7      	b.n	80028c8 <_puts_r+0x3c>
 8002918:	4622      	mov	r2, r4
 800291a:	4628      	mov	r0, r5
 800291c:	f000 f869 	bl	80029f2 <__swbuf_r>
 8002920:	3001      	adds	r0, #1
 8002922:	d1e7      	bne.n	80028f4 <_puts_r+0x68>
 8002924:	e7ce      	b.n	80028c4 <_puts_r+0x38>
 8002926:	3e01      	subs	r6, #1
 8002928:	e7e4      	b.n	80028f4 <_puts_r+0x68>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	6022      	str	r2, [r4, #0]
 8002930:	220a      	movs	r2, #10
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e7ee      	b.n	8002914 <_puts_r+0x88>
	...

08002938 <puts>:
 8002938:	4b02      	ldr	r3, [pc, #8]	@ (8002944 <puts+0xc>)
 800293a:	4601      	mov	r1, r0
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	f7ff bfa5 	b.w	800288c <_puts_r>
 8002942:	bf00      	nop
 8002944:	20000020 	.word	0x20000020

08002948 <iscanf>:
 8002948:	b40f      	push	{r0, r1, r2, r3}
 800294a:	b507      	push	{r0, r1, r2, lr}
 800294c:	4906      	ldr	r1, [pc, #24]	@ (8002968 <iscanf+0x20>)
 800294e:	ab04      	add	r3, sp, #16
 8002950:	6808      	ldr	r0, [r1, #0]
 8002952:	f853 2b04 	ldr.w	r2, [r3], #4
 8002956:	6841      	ldr	r1, [r0, #4]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	f000 febf 	bl	80036dc <_vfiscanf_r>
 800295e:	b003      	add	sp, #12
 8002960:	f85d eb04 	ldr.w	lr, [sp], #4
 8002964:	b004      	add	sp, #16
 8002966:	4770      	bx	lr
 8002968:	20000020 	.word	0x20000020

0800296c <__sread>:
 800296c:	b510      	push	{r4, lr}
 800296e:	460c      	mov	r4, r1
 8002970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002974:	f000 f8fc 	bl	8002b70 <_read_r>
 8002978:	2800      	cmp	r0, #0
 800297a:	bfab      	itete	ge
 800297c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800297e:	89a3      	ldrhlt	r3, [r4, #12]
 8002980:	181b      	addge	r3, r3, r0
 8002982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002986:	bfac      	ite	ge
 8002988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800298a:	81a3      	strhlt	r3, [r4, #12]
 800298c:	bd10      	pop	{r4, pc}

0800298e <__swrite>:
 800298e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002992:	461f      	mov	r7, r3
 8002994:	898b      	ldrh	r3, [r1, #12]
 8002996:	05db      	lsls	r3, r3, #23
 8002998:	4605      	mov	r5, r0
 800299a:	460c      	mov	r4, r1
 800299c:	4616      	mov	r6, r2
 800299e:	d505      	bpl.n	80029ac <__swrite+0x1e>
 80029a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a4:	2302      	movs	r3, #2
 80029a6:	2200      	movs	r2, #0
 80029a8:	f000 f8d0 	bl	8002b4c <_lseek_r>
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029b6:	81a3      	strh	r3, [r4, #12]
 80029b8:	4632      	mov	r2, r6
 80029ba:	463b      	mov	r3, r7
 80029bc:	4628      	mov	r0, r5
 80029be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029c2:	f000 b8e7 	b.w	8002b94 <_write_r>

080029c6 <__sseek>:
 80029c6:	b510      	push	{r4, lr}
 80029c8:	460c      	mov	r4, r1
 80029ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ce:	f000 f8bd 	bl	8002b4c <_lseek_r>
 80029d2:	1c43      	adds	r3, r0, #1
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	bf15      	itete	ne
 80029d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80029da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80029de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80029e2:	81a3      	strheq	r3, [r4, #12]
 80029e4:	bf18      	it	ne
 80029e6:	81a3      	strhne	r3, [r4, #12]
 80029e8:	bd10      	pop	{r4, pc}

080029ea <__sclose>:
 80029ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ee:	f000 b89d 	b.w	8002b2c <_close_r>

080029f2 <__swbuf_r>:
 80029f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f4:	460e      	mov	r6, r1
 80029f6:	4614      	mov	r4, r2
 80029f8:	4605      	mov	r5, r0
 80029fa:	b118      	cbz	r0, 8002a04 <__swbuf_r+0x12>
 80029fc:	6a03      	ldr	r3, [r0, #32]
 80029fe:	b90b      	cbnz	r3, 8002a04 <__swbuf_r+0x12>
 8002a00:	f7ff fef4 	bl	80027ec <__sinit>
 8002a04:	69a3      	ldr	r3, [r4, #24]
 8002a06:	60a3      	str	r3, [r4, #8]
 8002a08:	89a3      	ldrh	r3, [r4, #12]
 8002a0a:	071a      	lsls	r2, r3, #28
 8002a0c:	d501      	bpl.n	8002a12 <__swbuf_r+0x20>
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	b943      	cbnz	r3, 8002a24 <__swbuf_r+0x32>
 8002a12:	4621      	mov	r1, r4
 8002a14:	4628      	mov	r0, r5
 8002a16:	f000 f82b 	bl	8002a70 <__swsetup_r>
 8002a1a:	b118      	cbz	r0, 8002a24 <__swbuf_r+0x32>
 8002a1c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002a20:	4638      	mov	r0, r7
 8002a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	6922      	ldr	r2, [r4, #16]
 8002a28:	1a98      	subs	r0, r3, r2
 8002a2a:	6963      	ldr	r3, [r4, #20]
 8002a2c:	b2f6      	uxtb	r6, r6
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	4637      	mov	r7, r6
 8002a32:	dc05      	bgt.n	8002a40 <__swbuf_r+0x4e>
 8002a34:	4621      	mov	r1, r4
 8002a36:	4628      	mov	r0, r5
 8002a38:	f001 f836 	bl	8003aa8 <_fflush_r>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d1ed      	bne.n	8002a1c <__swbuf_r+0x2a>
 8002a40:	68a3      	ldr	r3, [r4, #8]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60a3      	str	r3, [r4, #8]
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	6022      	str	r2, [r4, #0]
 8002a4c:	701e      	strb	r6, [r3, #0]
 8002a4e:	6962      	ldr	r2, [r4, #20]
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d004      	beq.n	8002a60 <__swbuf_r+0x6e>
 8002a56:	89a3      	ldrh	r3, [r4, #12]
 8002a58:	07db      	lsls	r3, r3, #31
 8002a5a:	d5e1      	bpl.n	8002a20 <__swbuf_r+0x2e>
 8002a5c:	2e0a      	cmp	r6, #10
 8002a5e:	d1df      	bne.n	8002a20 <__swbuf_r+0x2e>
 8002a60:	4621      	mov	r1, r4
 8002a62:	4628      	mov	r0, r5
 8002a64:	f001 f820 	bl	8003aa8 <_fflush_r>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d0d9      	beq.n	8002a20 <__swbuf_r+0x2e>
 8002a6c:	e7d6      	b.n	8002a1c <__swbuf_r+0x2a>
	...

08002a70 <__swsetup_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <__swsetup_r+0xa8>)
 8002a74:	4605      	mov	r5, r0
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	460c      	mov	r4, r1
 8002a7a:	b118      	cbz	r0, 8002a84 <__swsetup_r+0x14>
 8002a7c:	6a03      	ldr	r3, [r0, #32]
 8002a7e:	b90b      	cbnz	r3, 8002a84 <__swsetup_r+0x14>
 8002a80:	f7ff feb4 	bl	80027ec <__sinit>
 8002a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a88:	0719      	lsls	r1, r3, #28
 8002a8a:	d422      	bmi.n	8002ad2 <__swsetup_r+0x62>
 8002a8c:	06da      	lsls	r2, r3, #27
 8002a8e:	d407      	bmi.n	8002aa0 <__swsetup_r+0x30>
 8002a90:	2209      	movs	r2, #9
 8002a92:	602a      	str	r2, [r5, #0]
 8002a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a98:	81a3      	strh	r3, [r4, #12]
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a9e:	e033      	b.n	8002b08 <__swsetup_r+0x98>
 8002aa0:	0758      	lsls	r0, r3, #29
 8002aa2:	d512      	bpl.n	8002aca <__swsetup_r+0x5a>
 8002aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002aa6:	b141      	cbz	r1, 8002aba <__swsetup_r+0x4a>
 8002aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002aac:	4299      	cmp	r1, r3
 8002aae:	d002      	beq.n	8002ab6 <__swsetup_r+0x46>
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f000 f8af 	bl	8002c14 <_free_r>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ac0:	81a3      	strh	r3, [r4, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	6063      	str	r3, [r4, #4]
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	b94b      	cbnz	r3, 8002aea <__swsetup_r+0x7a>
 8002ad6:	89a3      	ldrh	r3, [r4, #12]
 8002ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae0:	d003      	beq.n	8002aea <__swsetup_r+0x7a>
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f001 f82d 	bl	8003b44 <__smakebuf_r>
 8002aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aee:	f013 0201 	ands.w	r2, r3, #1
 8002af2:	d00a      	beq.n	8002b0a <__swsetup_r+0x9a>
 8002af4:	2200      	movs	r2, #0
 8002af6:	60a2      	str	r2, [r4, #8]
 8002af8:	6962      	ldr	r2, [r4, #20]
 8002afa:	4252      	negs	r2, r2
 8002afc:	61a2      	str	r2, [r4, #24]
 8002afe:	6922      	ldr	r2, [r4, #16]
 8002b00:	b942      	cbnz	r2, 8002b14 <__swsetup_r+0xa4>
 8002b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b06:	d1c5      	bne.n	8002a94 <__swsetup_r+0x24>
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
 8002b0a:	0799      	lsls	r1, r3, #30
 8002b0c:	bf58      	it	pl
 8002b0e:	6962      	ldrpl	r2, [r4, #20]
 8002b10:	60a2      	str	r2, [r4, #8]
 8002b12:	e7f4      	b.n	8002afe <__swsetup_r+0x8e>
 8002b14:	2000      	movs	r0, #0
 8002b16:	e7f7      	b.n	8002b08 <__swsetup_r+0x98>
 8002b18:	20000020 	.word	0x20000020

08002b1c <memset>:
 8002b1c:	4402      	add	r2, r0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <_close_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4d06      	ldr	r5, [pc, #24]	@ (8002b48 <_close_r+0x1c>)
 8002b30:	2300      	movs	r3, #0
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	f7ff fc08 	bl	800234c <_close>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d102      	bne.n	8002b46 <_close_r+0x1a>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	b103      	cbz	r3, 8002b46 <_close_r+0x1a>
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
 8002b48:	200002c4 	.word	0x200002c4

08002b4c <_lseek_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	4d07      	ldr	r5, [pc, #28]	@ (8002b6c <_lseek_r+0x20>)
 8002b50:	4604      	mov	r4, r0
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	2200      	movs	r2, #0
 8002b58:	602a      	str	r2, [r5, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff fbb7 	bl	80022ce <_lseek>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_lseek_r+0x1e>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_lseek_r+0x1e>
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	200002c4 	.word	0x200002c4

08002b70 <_read_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	4d07      	ldr	r5, [pc, #28]	@ (8002b90 <_read_r+0x20>)
 8002b74:	4604      	mov	r4, r0
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	602a      	str	r2, [r5, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f7ff fb4f 	bl	8002222 <_read>
 8002b84:	1c43      	adds	r3, r0, #1
 8002b86:	d102      	bne.n	8002b8e <_read_r+0x1e>
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	b103      	cbz	r3, 8002b8e <_read_r+0x1e>
 8002b8c:	6023      	str	r3, [r4, #0]
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}
 8002b90:	200002c4 	.word	0x200002c4

08002b94 <_write_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4d07      	ldr	r5, [pc, #28]	@ (8002bb4 <_write_r+0x20>)
 8002b98:	4604      	mov	r4, r0
 8002b9a:	4608      	mov	r0, r1
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	602a      	str	r2, [r5, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f7ff fba5 	bl	80022f2 <_write>
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d102      	bne.n	8002bb2 <_write_r+0x1e>
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	b103      	cbz	r3, 8002bb2 <_write_r+0x1e>
 8002bb0:	6023      	str	r3, [r4, #0]
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
 8002bb4:	200002c4 	.word	0x200002c4

08002bb8 <__errno>:
 8002bb8:	4b01      	ldr	r3, [pc, #4]	@ (8002bc0 <__errno+0x8>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000020 	.word	0x20000020

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f001 fafa 	bl	80041d0 <_init>
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2600      	movs	r6, #0
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	080043b8 	.word	0x080043b8
 8002c00:	080043b8 	.word	0x080043b8
 8002c04:	080043b8 	.word	0x080043b8
 8002c08:	080043bc 	.word	0x080043bc

08002c0c <__retarget_lock_init_recursive>:
 8002c0c:	4770      	bx	lr

08002c0e <__retarget_lock_acquire_recursive>:
 8002c0e:	4770      	bx	lr

08002c10 <__retarget_lock_release_recursive>:
 8002c10:	4770      	bx	lr
	...

08002c14 <_free_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4605      	mov	r5, r0
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	d041      	beq.n	8002ca0 <_free_r+0x8c>
 8002c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c20:	1f0c      	subs	r4, r1, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bfb8      	it	lt
 8002c26:	18e4      	addlt	r4, r4, r3
 8002c28:	f000 f8e0 	bl	8002dec <__malloc_lock>
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <_free_r+0x90>)
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	b933      	cbnz	r3, 8002c40 <_free_r+0x2c>
 8002c32:	6063      	str	r3, [r4, #4]
 8002c34:	6014      	str	r4, [r2, #0]
 8002c36:	4628      	mov	r0, r5
 8002c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c3c:	f000 b8dc 	b.w	8002df8 <__malloc_unlock>
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	d908      	bls.n	8002c56 <_free_r+0x42>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	1821      	adds	r1, r4, r0
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	bf01      	itttt	eq
 8002c4c:	6819      	ldreq	r1, [r3, #0]
 8002c4e:	685b      	ldreq	r3, [r3, #4]
 8002c50:	1809      	addeq	r1, r1, r0
 8002c52:	6021      	streq	r1, [r4, #0]
 8002c54:	e7ed      	b.n	8002c32 <_free_r+0x1e>
 8002c56:	461a      	mov	r2, r3
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b10b      	cbz	r3, 8002c60 <_free_r+0x4c>
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	d9fa      	bls.n	8002c56 <_free_r+0x42>
 8002c60:	6811      	ldr	r1, [r2, #0]
 8002c62:	1850      	adds	r0, r2, r1
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d10b      	bne.n	8002c80 <_free_r+0x6c>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	4401      	add	r1, r0
 8002c6c:	1850      	adds	r0, r2, r1
 8002c6e:	4283      	cmp	r3, r0
 8002c70:	6011      	str	r1, [r2, #0]
 8002c72:	d1e0      	bne.n	8002c36 <_free_r+0x22>
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	6053      	str	r3, [r2, #4]
 8002c7a:	4408      	add	r0, r1
 8002c7c:	6010      	str	r0, [r2, #0]
 8002c7e:	e7da      	b.n	8002c36 <_free_r+0x22>
 8002c80:	d902      	bls.n	8002c88 <_free_r+0x74>
 8002c82:	230c      	movs	r3, #12
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	e7d6      	b.n	8002c36 <_free_r+0x22>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	1821      	adds	r1, r4, r0
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	bf04      	itt	eq
 8002c90:	6819      	ldreq	r1, [r3, #0]
 8002c92:	685b      	ldreq	r3, [r3, #4]
 8002c94:	6063      	str	r3, [r4, #4]
 8002c96:	bf04      	itt	eq
 8002c98:	1809      	addeq	r1, r1, r0
 8002c9a:	6021      	streq	r1, [r4, #0]
 8002c9c:	6054      	str	r4, [r2, #4]
 8002c9e:	e7ca      	b.n	8002c36 <_free_r+0x22>
 8002ca0:	bd38      	pop	{r3, r4, r5, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200002d0 	.word	0x200002d0

08002ca8 <sbrk_aligned>:
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	4e0f      	ldr	r6, [pc, #60]	@ (8002ce8 <sbrk_aligned+0x40>)
 8002cac:	460c      	mov	r4, r1
 8002cae:	6831      	ldr	r1, [r6, #0]
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	b911      	cbnz	r1, 8002cba <sbrk_aligned+0x12>
 8002cb4:	f001 f94c 	bl	8003f50 <_sbrk_r>
 8002cb8:	6030      	str	r0, [r6, #0]
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f001 f947 	bl	8003f50 <_sbrk_r>
 8002cc2:	1c43      	adds	r3, r0, #1
 8002cc4:	d103      	bne.n	8002cce <sbrk_aligned+0x26>
 8002cc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002cca:	4620      	mov	r0, r4
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	1cc4      	adds	r4, r0, #3
 8002cd0:	f024 0403 	bic.w	r4, r4, #3
 8002cd4:	42a0      	cmp	r0, r4
 8002cd6:	d0f8      	beq.n	8002cca <sbrk_aligned+0x22>
 8002cd8:	1a21      	subs	r1, r4, r0
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f001 f938 	bl	8003f50 <_sbrk_r>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d1f2      	bne.n	8002cca <sbrk_aligned+0x22>
 8002ce4:	e7ef      	b.n	8002cc6 <sbrk_aligned+0x1e>
 8002ce6:	bf00      	nop
 8002ce8:	200002cc 	.word	0x200002cc

08002cec <_malloc_r>:
 8002cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf0:	1ccd      	adds	r5, r1, #3
 8002cf2:	f025 0503 	bic.w	r5, r5, #3
 8002cf6:	3508      	adds	r5, #8
 8002cf8:	2d0c      	cmp	r5, #12
 8002cfa:	bf38      	it	cc
 8002cfc:	250c      	movcc	r5, #12
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	4606      	mov	r6, r0
 8002d02:	db01      	blt.n	8002d08 <_malloc_r+0x1c>
 8002d04:	42a9      	cmp	r1, r5
 8002d06:	d904      	bls.n	8002d12 <_malloc_r+0x26>
 8002d08:	230c      	movs	r3, #12
 8002d0a:	6033      	str	r3, [r6, #0]
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002de8 <_malloc_r+0xfc>
 8002d16:	f000 f869 	bl	8002dec <__malloc_lock>
 8002d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d1e:	461c      	mov	r4, r3
 8002d20:	bb44      	cbnz	r4, 8002d74 <_malloc_r+0x88>
 8002d22:	4629      	mov	r1, r5
 8002d24:	4630      	mov	r0, r6
 8002d26:	f7ff ffbf 	bl	8002ca8 <sbrk_aligned>
 8002d2a:	1c43      	adds	r3, r0, #1
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	d158      	bne.n	8002de2 <_malloc_r+0xf6>
 8002d30:	f8d8 4000 	ldr.w	r4, [r8]
 8002d34:	4627      	mov	r7, r4
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d143      	bne.n	8002dc2 <_malloc_r+0xd6>
 8002d3a:	2c00      	cmp	r4, #0
 8002d3c:	d04b      	beq.n	8002dd6 <_malloc_r+0xea>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	4639      	mov	r1, r7
 8002d42:	4630      	mov	r0, r6
 8002d44:	eb04 0903 	add.w	r9, r4, r3
 8002d48:	f001 f902 	bl	8003f50 <_sbrk_r>
 8002d4c:	4581      	cmp	r9, r0
 8002d4e:	d142      	bne.n	8002dd6 <_malloc_r+0xea>
 8002d50:	6821      	ldr	r1, [r4, #0]
 8002d52:	1a6d      	subs	r5, r5, r1
 8002d54:	4629      	mov	r1, r5
 8002d56:	4630      	mov	r0, r6
 8002d58:	f7ff ffa6 	bl	8002ca8 <sbrk_aligned>
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d03a      	beq.n	8002dd6 <_malloc_r+0xea>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	442b      	add	r3, r5
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	bb62      	cbnz	r2, 8002dc8 <_malloc_r+0xdc>
 8002d6e:	f8c8 7000 	str.w	r7, [r8]
 8002d72:	e00f      	b.n	8002d94 <_malloc_r+0xa8>
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	1b52      	subs	r2, r2, r5
 8002d78:	d420      	bmi.n	8002dbc <_malloc_r+0xd0>
 8002d7a:	2a0b      	cmp	r2, #11
 8002d7c:	d917      	bls.n	8002dae <_malloc_r+0xc2>
 8002d7e:	1961      	adds	r1, r4, r5
 8002d80:	42a3      	cmp	r3, r4
 8002d82:	6025      	str	r5, [r4, #0]
 8002d84:	bf18      	it	ne
 8002d86:	6059      	strne	r1, [r3, #4]
 8002d88:	6863      	ldr	r3, [r4, #4]
 8002d8a:	bf08      	it	eq
 8002d8c:	f8c8 1000 	streq.w	r1, [r8]
 8002d90:	5162      	str	r2, [r4, r5]
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	4630      	mov	r0, r6
 8002d96:	f000 f82f 	bl	8002df8 <__malloc_unlock>
 8002d9a:	f104 000b 	add.w	r0, r4, #11
 8002d9e:	1d23      	adds	r3, r4, #4
 8002da0:	f020 0007 	bic.w	r0, r0, #7
 8002da4:	1ac2      	subs	r2, r0, r3
 8002da6:	bf1c      	itt	ne
 8002da8:	1a1b      	subne	r3, r3, r0
 8002daa:	50a3      	strne	r3, [r4, r2]
 8002dac:	e7af      	b.n	8002d0e <_malloc_r+0x22>
 8002dae:	6862      	ldr	r2, [r4, #4]
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	bf0c      	ite	eq
 8002db4:	f8c8 2000 	streq.w	r2, [r8]
 8002db8:	605a      	strne	r2, [r3, #4]
 8002dba:	e7eb      	b.n	8002d94 <_malloc_r+0xa8>
 8002dbc:	4623      	mov	r3, r4
 8002dbe:	6864      	ldr	r4, [r4, #4]
 8002dc0:	e7ae      	b.n	8002d20 <_malloc_r+0x34>
 8002dc2:	463c      	mov	r4, r7
 8002dc4:	687f      	ldr	r7, [r7, #4]
 8002dc6:	e7b6      	b.n	8002d36 <_malloc_r+0x4a>
 8002dc8:	461a      	mov	r2, r3
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d1fb      	bne.n	8002dc8 <_malloc_r+0xdc>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e7de      	b.n	8002d94 <_malloc_r+0xa8>
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	6033      	str	r3, [r6, #0]
 8002dda:	4630      	mov	r0, r6
 8002ddc:	f000 f80c 	bl	8002df8 <__malloc_unlock>
 8002de0:	e794      	b.n	8002d0c <_malloc_r+0x20>
 8002de2:	6005      	str	r5, [r0, #0]
 8002de4:	e7d6      	b.n	8002d94 <_malloc_r+0xa8>
 8002de6:	bf00      	nop
 8002de8:	200002d0 	.word	0x200002d0

08002dec <__malloc_lock>:
 8002dec:	4801      	ldr	r0, [pc, #4]	@ (8002df4 <__malloc_lock+0x8>)
 8002dee:	f7ff bf0e 	b.w	8002c0e <__retarget_lock_acquire_recursive>
 8002df2:	bf00      	nop
 8002df4:	200002c8 	.word	0x200002c8

08002df8 <__malloc_unlock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	@ (8002e00 <__malloc_unlock+0x8>)
 8002dfa:	f7ff bf09 	b.w	8002c10 <__retarget_lock_release_recursive>
 8002dfe:	bf00      	nop
 8002e00:	200002c8 	.word	0x200002c8

08002e04 <__sfputc_r>:
 8002e04:	6893      	ldr	r3, [r2, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	b410      	push	{r4}
 8002e0c:	6093      	str	r3, [r2, #8]
 8002e0e:	da08      	bge.n	8002e22 <__sfputc_r+0x1e>
 8002e10:	6994      	ldr	r4, [r2, #24]
 8002e12:	42a3      	cmp	r3, r4
 8002e14:	db01      	blt.n	8002e1a <__sfputc_r+0x16>
 8002e16:	290a      	cmp	r1, #10
 8002e18:	d103      	bne.n	8002e22 <__sfputc_r+0x1e>
 8002e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e1e:	f7ff bde8 	b.w	80029f2 <__swbuf_r>
 8002e22:	6813      	ldr	r3, [r2, #0]
 8002e24:	1c58      	adds	r0, r3, #1
 8002e26:	6010      	str	r0, [r2, #0]
 8002e28:	7019      	strb	r1, [r3, #0]
 8002e2a:	4608      	mov	r0, r1
 8002e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <__sfputs_r>:
 8002e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e34:	4606      	mov	r6, r0
 8002e36:	460f      	mov	r7, r1
 8002e38:	4614      	mov	r4, r2
 8002e3a:	18d5      	adds	r5, r2, r3
 8002e3c:	42ac      	cmp	r4, r5
 8002e3e:	d101      	bne.n	8002e44 <__sfputs_r+0x12>
 8002e40:	2000      	movs	r0, #0
 8002e42:	e007      	b.n	8002e54 <__sfputs_r+0x22>
 8002e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e48:	463a      	mov	r2, r7
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffda 	bl	8002e04 <__sfputc_r>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d1f3      	bne.n	8002e3c <__sfputs_r+0xa>
 8002e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e58 <_vfiprintf_r>:
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	460d      	mov	r5, r1
 8002e5e:	b09d      	sub	sp, #116	@ 0x74
 8002e60:	4614      	mov	r4, r2
 8002e62:	4698      	mov	r8, r3
 8002e64:	4606      	mov	r6, r0
 8002e66:	b118      	cbz	r0, 8002e70 <_vfiprintf_r+0x18>
 8002e68:	6a03      	ldr	r3, [r0, #32]
 8002e6a:	b90b      	cbnz	r3, 8002e70 <_vfiprintf_r+0x18>
 8002e6c:	f7ff fcbe 	bl	80027ec <__sinit>
 8002e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e72:	07d9      	lsls	r1, r3, #31
 8002e74:	d405      	bmi.n	8002e82 <_vfiprintf_r+0x2a>
 8002e76:	89ab      	ldrh	r3, [r5, #12]
 8002e78:	059a      	lsls	r2, r3, #22
 8002e7a:	d402      	bmi.n	8002e82 <_vfiprintf_r+0x2a>
 8002e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e7e:	f7ff fec6 	bl	8002c0e <__retarget_lock_acquire_recursive>
 8002e82:	89ab      	ldrh	r3, [r5, #12]
 8002e84:	071b      	lsls	r3, r3, #28
 8002e86:	d501      	bpl.n	8002e8c <_vfiprintf_r+0x34>
 8002e88:	692b      	ldr	r3, [r5, #16]
 8002e8a:	b99b      	cbnz	r3, 8002eb4 <_vfiprintf_r+0x5c>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f7ff fdee 	bl	8002a70 <__swsetup_r>
 8002e94:	b170      	cbz	r0, 8002eb4 <_vfiprintf_r+0x5c>
 8002e96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e98:	07dc      	lsls	r4, r3, #31
 8002e9a:	d504      	bpl.n	8002ea6 <_vfiprintf_r+0x4e>
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ea0:	b01d      	add	sp, #116	@ 0x74
 8002ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea6:	89ab      	ldrh	r3, [r5, #12]
 8002ea8:	0598      	lsls	r0, r3, #22
 8002eaa:	d4f7      	bmi.n	8002e9c <_vfiprintf_r+0x44>
 8002eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002eae:	f7ff feaf 	bl	8002c10 <__retarget_lock_release_recursive>
 8002eb2:	e7f3      	b.n	8002e9c <_vfiprintf_r+0x44>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eb8:	2320      	movs	r3, #32
 8002eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ec2:	2330      	movs	r3, #48	@ 0x30
 8002ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003074 <_vfiprintf_r+0x21c>
 8002ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ecc:	f04f 0901 	mov.w	r9, #1
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	469a      	mov	sl, r3
 8002ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ed8:	b10a      	cbz	r2, 8002ede <_vfiprintf_r+0x86>
 8002eda:	2a25      	cmp	r2, #37	@ 0x25
 8002edc:	d1f9      	bne.n	8002ed2 <_vfiprintf_r+0x7a>
 8002ede:	ebba 0b04 	subs.w	fp, sl, r4
 8002ee2:	d00b      	beq.n	8002efc <_vfiprintf_r+0xa4>
 8002ee4:	465b      	mov	r3, fp
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4630      	mov	r0, r6
 8002eec:	f7ff ffa1 	bl	8002e32 <__sfputs_r>
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	f000 80a7 	beq.w	8003044 <_vfiprintf_r+0x1ec>
 8002ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ef8:	445a      	add	r2, fp
 8002efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8002efc:	f89a 3000 	ldrb.w	r3, [sl]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 809f 	beq.w	8003044 <_vfiprintf_r+0x1ec>
 8002f06:	2300      	movs	r3, #0
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f10:	f10a 0a01 	add.w	sl, sl, #1
 8002f14:	9304      	str	r3, [sp, #16]
 8002f16:	9307      	str	r3, [sp, #28]
 8002f18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f1e:	4654      	mov	r4, sl
 8002f20:	2205      	movs	r2, #5
 8002f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f26:	4853      	ldr	r0, [pc, #332]	@ (8003074 <_vfiprintf_r+0x21c>)
 8002f28:	f7fd f97a 	bl	8000220 <memchr>
 8002f2c:	9a04      	ldr	r2, [sp, #16]
 8002f2e:	b9d8      	cbnz	r0, 8002f68 <_vfiprintf_r+0x110>
 8002f30:	06d1      	lsls	r1, r2, #27
 8002f32:	bf44      	itt	mi
 8002f34:	2320      	movmi	r3, #32
 8002f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f3a:	0713      	lsls	r3, r2, #28
 8002f3c:	bf44      	itt	mi
 8002f3e:	232b      	movmi	r3, #43	@ 0x2b
 8002f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f44:	f89a 3000 	ldrb.w	r3, [sl]
 8002f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f4a:	d015      	beq.n	8002f78 <_vfiprintf_r+0x120>
 8002f4c:	9a07      	ldr	r2, [sp, #28]
 8002f4e:	4654      	mov	r4, sl
 8002f50:	2000      	movs	r0, #0
 8002f52:	f04f 0c0a 	mov.w	ip, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f5c:	3b30      	subs	r3, #48	@ 0x30
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	d94b      	bls.n	8002ffa <_vfiprintf_r+0x1a2>
 8002f62:	b1b0      	cbz	r0, 8002f92 <_vfiprintf_r+0x13a>
 8002f64:	9207      	str	r2, [sp, #28]
 8002f66:	e014      	b.n	8002f92 <_vfiprintf_r+0x13a>
 8002f68:	eba0 0308 	sub.w	r3, r0, r8
 8002f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8002f70:	4313      	orrs	r3, r2
 8002f72:	9304      	str	r3, [sp, #16]
 8002f74:	46a2      	mov	sl, r4
 8002f76:	e7d2      	b.n	8002f1e <_vfiprintf_r+0xc6>
 8002f78:	9b03      	ldr	r3, [sp, #12]
 8002f7a:	1d19      	adds	r1, r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	9103      	str	r1, [sp, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bfbb      	ittet	lt
 8002f84:	425b      	neglt	r3, r3
 8002f86:	f042 0202 	orrlt.w	r2, r2, #2
 8002f8a:	9307      	strge	r3, [sp, #28]
 8002f8c:	9307      	strlt	r3, [sp, #28]
 8002f8e:	bfb8      	it	lt
 8002f90:	9204      	strlt	r2, [sp, #16]
 8002f92:	7823      	ldrb	r3, [r4, #0]
 8002f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f96:	d10a      	bne.n	8002fae <_vfiprintf_r+0x156>
 8002f98:	7863      	ldrb	r3, [r4, #1]
 8002f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f9c:	d132      	bne.n	8003004 <_vfiprintf_r+0x1ac>
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	1d1a      	adds	r2, r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	9203      	str	r2, [sp, #12]
 8002fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002faa:	3402      	adds	r4, #2
 8002fac:	9305      	str	r3, [sp, #20]
 8002fae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003084 <_vfiprintf_r+0x22c>
 8002fb2:	7821      	ldrb	r1, [r4, #0]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	4650      	mov	r0, sl
 8002fb8:	f7fd f932 	bl	8000220 <memchr>
 8002fbc:	b138      	cbz	r0, 8002fce <_vfiprintf_r+0x176>
 8002fbe:	9b04      	ldr	r3, [sp, #16]
 8002fc0:	eba0 000a 	sub.w	r0, r0, sl
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	4082      	lsls	r2, r0
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	3401      	adds	r4, #1
 8002fcc:	9304      	str	r3, [sp, #16]
 8002fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd2:	4829      	ldr	r0, [pc, #164]	@ (8003078 <_vfiprintf_r+0x220>)
 8002fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fd8:	2206      	movs	r2, #6
 8002fda:	f7fd f921 	bl	8000220 <memchr>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d03f      	beq.n	8003062 <_vfiprintf_r+0x20a>
 8002fe2:	4b26      	ldr	r3, [pc, #152]	@ (800307c <_vfiprintf_r+0x224>)
 8002fe4:	bb1b      	cbnz	r3, 800302e <_vfiprintf_r+0x1d6>
 8002fe6:	9b03      	ldr	r3, [sp, #12]
 8002fe8:	3307      	adds	r3, #7
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	3308      	adds	r3, #8
 8002ff0:	9303      	str	r3, [sp, #12]
 8002ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ff4:	443b      	add	r3, r7
 8002ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ff8:	e76a      	b.n	8002ed0 <_vfiprintf_r+0x78>
 8002ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ffe:	460c      	mov	r4, r1
 8003000:	2001      	movs	r0, #1
 8003002:	e7a8      	b.n	8002f56 <_vfiprintf_r+0xfe>
 8003004:	2300      	movs	r3, #0
 8003006:	3401      	adds	r4, #1
 8003008:	9305      	str	r3, [sp, #20]
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 0c0a 	mov.w	ip, #10
 8003010:	4620      	mov	r0, r4
 8003012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003016:	3a30      	subs	r2, #48	@ 0x30
 8003018:	2a09      	cmp	r2, #9
 800301a:	d903      	bls.n	8003024 <_vfiprintf_r+0x1cc>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0c6      	beq.n	8002fae <_vfiprintf_r+0x156>
 8003020:	9105      	str	r1, [sp, #20]
 8003022:	e7c4      	b.n	8002fae <_vfiprintf_r+0x156>
 8003024:	fb0c 2101 	mla	r1, ip, r1, r2
 8003028:	4604      	mov	r4, r0
 800302a:	2301      	movs	r3, #1
 800302c:	e7f0      	b.n	8003010 <_vfiprintf_r+0x1b8>
 800302e:	ab03      	add	r3, sp, #12
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	462a      	mov	r2, r5
 8003034:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <_vfiprintf_r+0x228>)
 8003036:	a904      	add	r1, sp, #16
 8003038:	4630      	mov	r0, r6
 800303a:	f3af 8000 	nop.w
 800303e:	4607      	mov	r7, r0
 8003040:	1c78      	adds	r0, r7, #1
 8003042:	d1d6      	bne.n	8002ff2 <_vfiprintf_r+0x19a>
 8003044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003046:	07d9      	lsls	r1, r3, #31
 8003048:	d405      	bmi.n	8003056 <_vfiprintf_r+0x1fe>
 800304a:	89ab      	ldrh	r3, [r5, #12]
 800304c:	059a      	lsls	r2, r3, #22
 800304e:	d402      	bmi.n	8003056 <_vfiprintf_r+0x1fe>
 8003050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003052:	f7ff fddd 	bl	8002c10 <__retarget_lock_release_recursive>
 8003056:	89ab      	ldrh	r3, [r5, #12]
 8003058:	065b      	lsls	r3, r3, #25
 800305a:	f53f af1f 	bmi.w	8002e9c <_vfiprintf_r+0x44>
 800305e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003060:	e71e      	b.n	8002ea0 <_vfiprintf_r+0x48>
 8003062:	ab03      	add	r3, sp, #12
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	462a      	mov	r2, r5
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <_vfiprintf_r+0x228>)
 800306a:	a904      	add	r1, sp, #16
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f879 	bl	8003164 <_printf_i>
 8003072:	e7e4      	b.n	800303e <_vfiprintf_r+0x1e6>
 8003074:	0800425e 	.word	0x0800425e
 8003078:	08004268 	.word	0x08004268
 800307c:	00000000 	.word	0x00000000
 8003080:	08002e33 	.word	0x08002e33
 8003084:	08004264 	.word	0x08004264

08003088 <_printf_common>:
 8003088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800308c:	4616      	mov	r6, r2
 800308e:	4698      	mov	r8, r3
 8003090:	688a      	ldr	r2, [r1, #8]
 8003092:	690b      	ldr	r3, [r1, #16]
 8003094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003098:	4293      	cmp	r3, r2
 800309a:	bfb8      	it	lt
 800309c:	4613      	movlt	r3, r2
 800309e:	6033      	str	r3, [r6, #0]
 80030a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030a4:	4607      	mov	r7, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	b10a      	cbz	r2, 80030ae <_printf_common+0x26>
 80030aa:	3301      	adds	r3, #1
 80030ac:	6033      	str	r3, [r6, #0]
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	0699      	lsls	r1, r3, #26
 80030b2:	bf42      	ittt	mi
 80030b4:	6833      	ldrmi	r3, [r6, #0]
 80030b6:	3302      	addmi	r3, #2
 80030b8:	6033      	strmi	r3, [r6, #0]
 80030ba:	6825      	ldr	r5, [r4, #0]
 80030bc:	f015 0506 	ands.w	r5, r5, #6
 80030c0:	d106      	bne.n	80030d0 <_printf_common+0x48>
 80030c2:	f104 0a19 	add.w	sl, r4, #25
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	6832      	ldr	r2, [r6, #0]
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	42ab      	cmp	r3, r5
 80030ce:	dc26      	bgt.n	800311e <_printf_common+0x96>
 80030d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030d4:	6822      	ldr	r2, [r4, #0]
 80030d6:	3b00      	subs	r3, #0
 80030d8:	bf18      	it	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	0692      	lsls	r2, r2, #26
 80030de:	d42b      	bmi.n	8003138 <_printf_common+0xb0>
 80030e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030e4:	4641      	mov	r1, r8
 80030e6:	4638      	mov	r0, r7
 80030e8:	47c8      	blx	r9
 80030ea:	3001      	adds	r0, #1
 80030ec:	d01e      	beq.n	800312c <_printf_common+0xa4>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	6922      	ldr	r2, [r4, #16]
 80030f2:	f003 0306 	and.w	r3, r3, #6
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf02      	ittt	eq
 80030fa:	68e5      	ldreq	r5, [r4, #12]
 80030fc:	6833      	ldreq	r3, [r6, #0]
 80030fe:	1aed      	subeq	r5, r5, r3
 8003100:	68a3      	ldr	r3, [r4, #8]
 8003102:	bf0c      	ite	eq
 8003104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003108:	2500      	movne	r5, #0
 800310a:	4293      	cmp	r3, r2
 800310c:	bfc4      	itt	gt
 800310e:	1a9b      	subgt	r3, r3, r2
 8003110:	18ed      	addgt	r5, r5, r3
 8003112:	2600      	movs	r6, #0
 8003114:	341a      	adds	r4, #26
 8003116:	42b5      	cmp	r5, r6
 8003118:	d11a      	bne.n	8003150 <_printf_common+0xc8>
 800311a:	2000      	movs	r0, #0
 800311c:	e008      	b.n	8003130 <_printf_common+0xa8>
 800311e:	2301      	movs	r3, #1
 8003120:	4652      	mov	r2, sl
 8003122:	4641      	mov	r1, r8
 8003124:	4638      	mov	r0, r7
 8003126:	47c8      	blx	r9
 8003128:	3001      	adds	r0, #1
 800312a:	d103      	bne.n	8003134 <_printf_common+0xac>
 800312c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003134:	3501      	adds	r5, #1
 8003136:	e7c6      	b.n	80030c6 <_printf_common+0x3e>
 8003138:	18e1      	adds	r1, r4, r3
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	2030      	movs	r0, #48	@ 0x30
 800313e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003142:	4422      	add	r2, r4
 8003144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800314c:	3302      	adds	r3, #2
 800314e:	e7c7      	b.n	80030e0 <_printf_common+0x58>
 8003150:	2301      	movs	r3, #1
 8003152:	4622      	mov	r2, r4
 8003154:	4641      	mov	r1, r8
 8003156:	4638      	mov	r0, r7
 8003158:	47c8      	blx	r9
 800315a:	3001      	adds	r0, #1
 800315c:	d0e6      	beq.n	800312c <_printf_common+0xa4>
 800315e:	3601      	adds	r6, #1
 8003160:	e7d9      	b.n	8003116 <_printf_common+0x8e>
	...

08003164 <_printf_i>:
 8003164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003168:	7e0f      	ldrb	r7, [r1, #24]
 800316a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800316c:	2f78      	cmp	r7, #120	@ 0x78
 800316e:	4691      	mov	r9, r2
 8003170:	4680      	mov	r8, r0
 8003172:	460c      	mov	r4, r1
 8003174:	469a      	mov	sl, r3
 8003176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800317a:	d807      	bhi.n	800318c <_printf_i+0x28>
 800317c:	2f62      	cmp	r7, #98	@ 0x62
 800317e:	d80a      	bhi.n	8003196 <_printf_i+0x32>
 8003180:	2f00      	cmp	r7, #0
 8003182:	f000 80d2 	beq.w	800332a <_printf_i+0x1c6>
 8003186:	2f58      	cmp	r7, #88	@ 0x58
 8003188:	f000 80b9 	beq.w	80032fe <_printf_i+0x19a>
 800318c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003194:	e03a      	b.n	800320c <_printf_i+0xa8>
 8003196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800319a:	2b15      	cmp	r3, #21
 800319c:	d8f6      	bhi.n	800318c <_printf_i+0x28>
 800319e:	a101      	add	r1, pc, #4	@ (adr r1, 80031a4 <_printf_i+0x40>)
 80031a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031a4:	080031fd 	.word	0x080031fd
 80031a8:	08003211 	.word	0x08003211
 80031ac:	0800318d 	.word	0x0800318d
 80031b0:	0800318d 	.word	0x0800318d
 80031b4:	0800318d 	.word	0x0800318d
 80031b8:	0800318d 	.word	0x0800318d
 80031bc:	08003211 	.word	0x08003211
 80031c0:	0800318d 	.word	0x0800318d
 80031c4:	0800318d 	.word	0x0800318d
 80031c8:	0800318d 	.word	0x0800318d
 80031cc:	0800318d 	.word	0x0800318d
 80031d0:	08003311 	.word	0x08003311
 80031d4:	0800323b 	.word	0x0800323b
 80031d8:	080032cb 	.word	0x080032cb
 80031dc:	0800318d 	.word	0x0800318d
 80031e0:	0800318d 	.word	0x0800318d
 80031e4:	08003333 	.word	0x08003333
 80031e8:	0800318d 	.word	0x0800318d
 80031ec:	0800323b 	.word	0x0800323b
 80031f0:	0800318d 	.word	0x0800318d
 80031f4:	0800318d 	.word	0x0800318d
 80031f8:	080032d3 	.word	0x080032d3
 80031fc:	6833      	ldr	r3, [r6, #0]
 80031fe:	1d1a      	adds	r2, r3, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6032      	str	r2, [r6, #0]
 8003204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800320c:	2301      	movs	r3, #1
 800320e:	e09d      	b.n	800334c <_printf_i+0x1e8>
 8003210:	6833      	ldr	r3, [r6, #0]
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	1d19      	adds	r1, r3, #4
 8003216:	6031      	str	r1, [r6, #0]
 8003218:	0606      	lsls	r6, r0, #24
 800321a:	d501      	bpl.n	8003220 <_printf_i+0xbc>
 800321c:	681d      	ldr	r5, [r3, #0]
 800321e:	e003      	b.n	8003228 <_printf_i+0xc4>
 8003220:	0645      	lsls	r5, r0, #25
 8003222:	d5fb      	bpl.n	800321c <_printf_i+0xb8>
 8003224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003228:	2d00      	cmp	r5, #0
 800322a:	da03      	bge.n	8003234 <_printf_i+0xd0>
 800322c:	232d      	movs	r3, #45	@ 0x2d
 800322e:	426d      	negs	r5, r5
 8003230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003234:	4859      	ldr	r0, [pc, #356]	@ (800339c <_printf_i+0x238>)
 8003236:	230a      	movs	r3, #10
 8003238:	e011      	b.n	800325e <_printf_i+0xfa>
 800323a:	6821      	ldr	r1, [r4, #0]
 800323c:	6833      	ldr	r3, [r6, #0]
 800323e:	0608      	lsls	r0, r1, #24
 8003240:	f853 5b04 	ldr.w	r5, [r3], #4
 8003244:	d402      	bmi.n	800324c <_printf_i+0xe8>
 8003246:	0649      	lsls	r1, r1, #25
 8003248:	bf48      	it	mi
 800324a:	b2ad      	uxthmi	r5, r5
 800324c:	2f6f      	cmp	r7, #111	@ 0x6f
 800324e:	4853      	ldr	r0, [pc, #332]	@ (800339c <_printf_i+0x238>)
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	bf14      	ite	ne
 8003254:	230a      	movne	r3, #10
 8003256:	2308      	moveq	r3, #8
 8003258:	2100      	movs	r1, #0
 800325a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800325e:	6866      	ldr	r6, [r4, #4]
 8003260:	60a6      	str	r6, [r4, #8]
 8003262:	2e00      	cmp	r6, #0
 8003264:	bfa2      	ittt	ge
 8003266:	6821      	ldrge	r1, [r4, #0]
 8003268:	f021 0104 	bicge.w	r1, r1, #4
 800326c:	6021      	strge	r1, [r4, #0]
 800326e:	b90d      	cbnz	r5, 8003274 <_printf_i+0x110>
 8003270:	2e00      	cmp	r6, #0
 8003272:	d04b      	beq.n	800330c <_printf_i+0x1a8>
 8003274:	4616      	mov	r6, r2
 8003276:	fbb5 f1f3 	udiv	r1, r5, r3
 800327a:	fb03 5711 	mls	r7, r3, r1, r5
 800327e:	5dc7      	ldrb	r7, [r0, r7]
 8003280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003284:	462f      	mov	r7, r5
 8003286:	42bb      	cmp	r3, r7
 8003288:	460d      	mov	r5, r1
 800328a:	d9f4      	bls.n	8003276 <_printf_i+0x112>
 800328c:	2b08      	cmp	r3, #8
 800328e:	d10b      	bne.n	80032a8 <_printf_i+0x144>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	07df      	lsls	r7, r3, #31
 8003294:	d508      	bpl.n	80032a8 <_printf_i+0x144>
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	6861      	ldr	r1, [r4, #4]
 800329a:	4299      	cmp	r1, r3
 800329c:	bfde      	ittt	le
 800329e:	2330      	movle	r3, #48	@ 0x30
 80032a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80032a8:	1b92      	subs	r2, r2, r6
 80032aa:	6122      	str	r2, [r4, #16]
 80032ac:	f8cd a000 	str.w	sl, [sp]
 80032b0:	464b      	mov	r3, r9
 80032b2:	aa03      	add	r2, sp, #12
 80032b4:	4621      	mov	r1, r4
 80032b6:	4640      	mov	r0, r8
 80032b8:	f7ff fee6 	bl	8003088 <_printf_common>
 80032bc:	3001      	adds	r0, #1
 80032be:	d14a      	bne.n	8003356 <_printf_i+0x1f2>
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032c4:	b004      	add	sp, #16
 80032c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	f043 0320 	orr.w	r3, r3, #32
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	4833      	ldr	r0, [pc, #204]	@ (80033a0 <_printf_i+0x23c>)
 80032d4:	2778      	movs	r7, #120	@ 0x78
 80032d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	6831      	ldr	r1, [r6, #0]
 80032de:	061f      	lsls	r7, r3, #24
 80032e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80032e4:	d402      	bmi.n	80032ec <_printf_i+0x188>
 80032e6:	065f      	lsls	r7, r3, #25
 80032e8:	bf48      	it	mi
 80032ea:	b2ad      	uxthmi	r5, r5
 80032ec:	6031      	str	r1, [r6, #0]
 80032ee:	07d9      	lsls	r1, r3, #31
 80032f0:	bf44      	itt	mi
 80032f2:	f043 0320 	orrmi.w	r3, r3, #32
 80032f6:	6023      	strmi	r3, [r4, #0]
 80032f8:	b11d      	cbz	r5, 8003302 <_printf_i+0x19e>
 80032fa:	2310      	movs	r3, #16
 80032fc:	e7ac      	b.n	8003258 <_printf_i+0xf4>
 80032fe:	4827      	ldr	r0, [pc, #156]	@ (800339c <_printf_i+0x238>)
 8003300:	e7e9      	b.n	80032d6 <_printf_i+0x172>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	f023 0320 	bic.w	r3, r3, #32
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	e7f6      	b.n	80032fa <_printf_i+0x196>
 800330c:	4616      	mov	r6, r2
 800330e:	e7bd      	b.n	800328c <_printf_i+0x128>
 8003310:	6833      	ldr	r3, [r6, #0]
 8003312:	6825      	ldr	r5, [r4, #0]
 8003314:	6961      	ldr	r1, [r4, #20]
 8003316:	1d18      	adds	r0, r3, #4
 8003318:	6030      	str	r0, [r6, #0]
 800331a:	062e      	lsls	r6, r5, #24
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	d501      	bpl.n	8003324 <_printf_i+0x1c0>
 8003320:	6019      	str	r1, [r3, #0]
 8003322:	e002      	b.n	800332a <_printf_i+0x1c6>
 8003324:	0668      	lsls	r0, r5, #25
 8003326:	d5fb      	bpl.n	8003320 <_printf_i+0x1bc>
 8003328:	8019      	strh	r1, [r3, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	6123      	str	r3, [r4, #16]
 800332e:	4616      	mov	r6, r2
 8003330:	e7bc      	b.n	80032ac <_printf_i+0x148>
 8003332:	6833      	ldr	r3, [r6, #0]
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	6032      	str	r2, [r6, #0]
 8003338:	681e      	ldr	r6, [r3, #0]
 800333a:	6862      	ldr	r2, [r4, #4]
 800333c:	2100      	movs	r1, #0
 800333e:	4630      	mov	r0, r6
 8003340:	f7fc ff6e 	bl	8000220 <memchr>
 8003344:	b108      	cbz	r0, 800334a <_printf_i+0x1e6>
 8003346:	1b80      	subs	r0, r0, r6
 8003348:	6060      	str	r0, [r4, #4]
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	6123      	str	r3, [r4, #16]
 800334e:	2300      	movs	r3, #0
 8003350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003354:	e7aa      	b.n	80032ac <_printf_i+0x148>
 8003356:	6923      	ldr	r3, [r4, #16]
 8003358:	4632      	mov	r2, r6
 800335a:	4649      	mov	r1, r9
 800335c:	4640      	mov	r0, r8
 800335e:	47d0      	blx	sl
 8003360:	3001      	adds	r0, #1
 8003362:	d0ad      	beq.n	80032c0 <_printf_i+0x15c>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	079b      	lsls	r3, r3, #30
 8003368:	d413      	bmi.n	8003392 <_printf_i+0x22e>
 800336a:	68e0      	ldr	r0, [r4, #12]
 800336c:	9b03      	ldr	r3, [sp, #12]
 800336e:	4298      	cmp	r0, r3
 8003370:	bfb8      	it	lt
 8003372:	4618      	movlt	r0, r3
 8003374:	e7a6      	b.n	80032c4 <_printf_i+0x160>
 8003376:	2301      	movs	r3, #1
 8003378:	4632      	mov	r2, r6
 800337a:	4649      	mov	r1, r9
 800337c:	4640      	mov	r0, r8
 800337e:	47d0      	blx	sl
 8003380:	3001      	adds	r0, #1
 8003382:	d09d      	beq.n	80032c0 <_printf_i+0x15c>
 8003384:	3501      	adds	r5, #1
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	9903      	ldr	r1, [sp, #12]
 800338a:	1a5b      	subs	r3, r3, r1
 800338c:	42ab      	cmp	r3, r5
 800338e:	dcf2      	bgt.n	8003376 <_printf_i+0x212>
 8003390:	e7eb      	b.n	800336a <_printf_i+0x206>
 8003392:	2500      	movs	r5, #0
 8003394:	f104 0619 	add.w	r6, r4, #25
 8003398:	e7f5      	b.n	8003386 <_printf_i+0x222>
 800339a:	bf00      	nop
 800339c:	0800426f 	.word	0x0800426f
 80033a0:	08004280 	.word	0x08004280

080033a4 <__svfiscanf_r>:
 80033a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a8:	461d      	mov	r5, r3
 80033aa:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80033ac:	07df      	lsls	r7, r3, #31
 80033ae:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80033b2:	4606      	mov	r6, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	4691      	mov	r9, r2
 80033b8:	d405      	bmi.n	80033c6 <__svfiscanf_r+0x22>
 80033ba:	898b      	ldrh	r3, [r1, #12]
 80033bc:	0598      	lsls	r0, r3, #22
 80033be:	d402      	bmi.n	80033c6 <__svfiscanf_r+0x22>
 80033c0:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80033c2:	f7ff fc24 	bl	8002c0e <__retarget_lock_acquire_recursive>
 80033c6:	2300      	movs	r3, #0
 80033c8:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80033cc:	4ba7      	ldr	r3, [pc, #668]	@ (800366c <__svfiscanf_r+0x2c8>)
 80033ce:	93a0      	str	r3, [sp, #640]	@ 0x280
 80033d0:	f10d 0804 	add.w	r8, sp, #4
 80033d4:	4ba6      	ldr	r3, [pc, #664]	@ (8003670 <__svfiscanf_r+0x2cc>)
 80033d6:	4fa7      	ldr	r7, [pc, #668]	@ (8003674 <__svfiscanf_r+0x2d0>)
 80033d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80033dc:	93a1      	str	r3, [sp, #644]	@ 0x284
 80033de:	9500      	str	r5, [sp, #0]
 80033e0:	f899 3000 	ldrb.w	r3, [r9]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 816c 	beq.w	80036c2 <__svfiscanf_r+0x31e>
 80033ea:	5cf9      	ldrb	r1, [r7, r3]
 80033ec:	f011 0108 	ands.w	r1, r1, #8
 80033f0:	f109 0501 	add.w	r5, r9, #1
 80033f4:	d019      	beq.n	800342a <__svfiscanf_r+0x86>
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dd0f      	ble.n	800341c <__svfiscanf_r+0x78>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	5cba      	ldrb	r2, [r7, r2]
 8003402:	0711      	lsls	r1, r2, #28
 8003404:	d401      	bmi.n	800340a <__svfiscanf_r+0x66>
 8003406:	46a9      	mov	r9, r5
 8003408:	e7ea      	b.n	80033e0 <__svfiscanf_r+0x3c>
 800340a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800340c:	3201      	adds	r2, #1
 800340e:	9245      	str	r2, [sp, #276]	@ 0x114
 8003410:	6862      	ldr	r2, [r4, #4]
 8003412:	3301      	adds	r3, #1
 8003414:	3a01      	subs	r2, #1
 8003416:	6062      	str	r2, [r4, #4]
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	e7ec      	b.n	80033f6 <__svfiscanf_r+0x52>
 800341c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800341e:	4621      	mov	r1, r4
 8003420:	4630      	mov	r0, r6
 8003422:	4798      	blx	r3
 8003424:	2800      	cmp	r0, #0
 8003426:	d0e9      	beq.n	80033fc <__svfiscanf_r+0x58>
 8003428:	e7ed      	b.n	8003406 <__svfiscanf_r+0x62>
 800342a:	2b25      	cmp	r3, #37	@ 0x25
 800342c:	d012      	beq.n	8003454 <__svfiscanf_r+0xb0>
 800342e:	4699      	mov	r9, r3
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f340 8095 	ble.w	8003562 <__svfiscanf_r+0x1be>
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	7813      	ldrb	r3, [r2, #0]
 800343c:	454b      	cmp	r3, r9
 800343e:	f040 8140 	bne.w	80036c2 <__svfiscanf_r+0x31e>
 8003442:	6863      	ldr	r3, [r4, #4]
 8003444:	3b01      	subs	r3, #1
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800344a:	3201      	adds	r2, #1
 800344c:	3301      	adds	r3, #1
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	9345      	str	r3, [sp, #276]	@ 0x114
 8003452:	e7d8      	b.n	8003406 <__svfiscanf_r+0x62>
 8003454:	9141      	str	r1, [sp, #260]	@ 0x104
 8003456:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003458:	f899 3001 	ldrb.w	r3, [r9, #1]
 800345c:	2b2a      	cmp	r3, #42	@ 0x2a
 800345e:	bf02      	ittt	eq
 8003460:	2310      	moveq	r3, #16
 8003462:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003464:	f109 0502 	addeq.w	r5, r9, #2
 8003468:	220a      	movs	r2, #10
 800346a:	46a9      	mov	r9, r5
 800346c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003470:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003474:	2b09      	cmp	r3, #9
 8003476:	d91f      	bls.n	80034b8 <__svfiscanf_r+0x114>
 8003478:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8003678 <__svfiscanf_r+0x2d4>
 800347c:	2203      	movs	r2, #3
 800347e:	4650      	mov	r0, sl
 8003480:	f7fc fece 	bl	8000220 <memchr>
 8003484:	b138      	cbz	r0, 8003496 <__svfiscanf_r+0xf2>
 8003486:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003488:	eba0 000a 	sub.w	r0, r0, sl
 800348c:	2301      	movs	r3, #1
 800348e:	4083      	lsls	r3, r0
 8003490:	4313      	orrs	r3, r2
 8003492:	9341      	str	r3, [sp, #260]	@ 0x104
 8003494:	464d      	mov	r5, r9
 8003496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800349a:	2b78      	cmp	r3, #120	@ 0x78
 800349c:	d807      	bhi.n	80034ae <__svfiscanf_r+0x10a>
 800349e:	2b57      	cmp	r3, #87	@ 0x57
 80034a0:	d811      	bhi.n	80034c6 <__svfiscanf_r+0x122>
 80034a2:	2b25      	cmp	r3, #37	@ 0x25
 80034a4:	d0c3      	beq.n	800342e <__svfiscanf_r+0x8a>
 80034a6:	d857      	bhi.n	8003558 <__svfiscanf_r+0x1b4>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80c1 	beq.w	8003630 <__svfiscanf_r+0x28c>
 80034ae:	2303      	movs	r3, #3
 80034b0:	9347      	str	r3, [sp, #284]	@ 0x11c
 80034b2:	230a      	movs	r3, #10
 80034b4:	9342      	str	r3, [sp, #264]	@ 0x108
 80034b6:	e07e      	b.n	80035b6 <__svfiscanf_r+0x212>
 80034b8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80034ba:	fb02 1103 	mla	r1, r2, r3, r1
 80034be:	3930      	subs	r1, #48	@ 0x30
 80034c0:	9143      	str	r1, [sp, #268]	@ 0x10c
 80034c2:	464d      	mov	r5, r9
 80034c4:	e7d1      	b.n	800346a <__svfiscanf_r+0xc6>
 80034c6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80034ca:	2a20      	cmp	r2, #32
 80034cc:	d8ef      	bhi.n	80034ae <__svfiscanf_r+0x10a>
 80034ce:	a101      	add	r1, pc, #4	@ (adr r1, 80034d4 <__svfiscanf_r+0x130>)
 80034d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80034d4:	08003595 	.word	0x08003595
 80034d8:	080034af 	.word	0x080034af
 80034dc:	080034af 	.word	0x080034af
 80034e0:	080035ef 	.word	0x080035ef
 80034e4:	080034af 	.word	0x080034af
 80034e8:	080034af 	.word	0x080034af
 80034ec:	080034af 	.word	0x080034af
 80034f0:	080034af 	.word	0x080034af
 80034f4:	080034af 	.word	0x080034af
 80034f8:	080034af 	.word	0x080034af
 80034fc:	080034af 	.word	0x080034af
 8003500:	08003605 	.word	0x08003605
 8003504:	080035eb 	.word	0x080035eb
 8003508:	0800355f 	.word	0x0800355f
 800350c:	0800355f 	.word	0x0800355f
 8003510:	0800355f 	.word	0x0800355f
 8003514:	080034af 	.word	0x080034af
 8003518:	080035a7 	.word	0x080035a7
 800351c:	080034af 	.word	0x080034af
 8003520:	080034af 	.word	0x080034af
 8003524:	080034af 	.word	0x080034af
 8003528:	080034af 	.word	0x080034af
 800352c:	08003615 	.word	0x08003615
 8003530:	080035af 	.word	0x080035af
 8003534:	0800358d 	.word	0x0800358d
 8003538:	080034af 	.word	0x080034af
 800353c:	080034af 	.word	0x080034af
 8003540:	08003611 	.word	0x08003611
 8003544:	080034af 	.word	0x080034af
 8003548:	080035eb 	.word	0x080035eb
 800354c:	080034af 	.word	0x080034af
 8003550:	080034af 	.word	0x080034af
 8003554:	08003595 	.word	0x08003595
 8003558:	3b45      	subs	r3, #69	@ 0x45
 800355a:	2b02      	cmp	r3, #2
 800355c:	d8a7      	bhi.n	80034ae <__svfiscanf_r+0x10a>
 800355e:	2305      	movs	r3, #5
 8003560:	e028      	b.n	80035b4 <__svfiscanf_r+0x210>
 8003562:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003564:	4621      	mov	r1, r4
 8003566:	4630      	mov	r0, r6
 8003568:	4798      	blx	r3
 800356a:	2800      	cmp	r0, #0
 800356c:	f43f af64 	beq.w	8003438 <__svfiscanf_r+0x94>
 8003570:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003572:	07da      	lsls	r2, r3, #31
 8003574:	f140 809d 	bpl.w	80036b2 <__svfiscanf_r+0x30e>
 8003578:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800357a:	2800      	cmp	r0, #0
 800357c:	d061      	beq.n	8003642 <__svfiscanf_r+0x29e>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	0659      	lsls	r1, r3, #25
 8003582:	d45e      	bmi.n	8003642 <__svfiscanf_r+0x29e>
 8003584:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	9241      	str	r2, [sp, #260]	@ 0x104
 8003594:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800359a:	9241      	str	r2, [sp, #260]	@ 0x104
 800359c:	2210      	movs	r2, #16
 800359e:	2b6e      	cmp	r3, #110	@ 0x6e
 80035a0:	9242      	str	r2, [sp, #264]	@ 0x108
 80035a2:	d902      	bls.n	80035aa <__svfiscanf_r+0x206>
 80035a4:	e005      	b.n	80035b2 <__svfiscanf_r+0x20e>
 80035a6:	2300      	movs	r3, #0
 80035a8:	9342      	str	r3, [sp, #264]	@ 0x108
 80035aa:	2303      	movs	r3, #3
 80035ac:	e002      	b.n	80035b4 <__svfiscanf_r+0x210>
 80035ae:	2308      	movs	r3, #8
 80035b0:	9342      	str	r3, [sp, #264]	@ 0x108
 80035b2:	2304      	movs	r3, #4
 80035b4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	dd45      	ble.n	8003648 <__svfiscanf_r+0x2a4>
 80035bc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80035be:	0659      	lsls	r1, r3, #25
 80035c0:	d404      	bmi.n	80035cc <__svfiscanf_r+0x228>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	5cba      	ldrb	r2, [r7, r2]
 80035c8:	0712      	lsls	r2, r2, #28
 80035ca:	d444      	bmi.n	8003656 <__svfiscanf_r+0x2b2>
 80035cc:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	dc5b      	bgt.n	800368a <__svfiscanf_r+0x2e6>
 80035d2:	466b      	mov	r3, sp
 80035d4:	4622      	mov	r2, r4
 80035d6:	a941      	add	r1, sp, #260	@ 0x104
 80035d8:	4630      	mov	r0, r6
 80035da:	f000 f893 	bl	8003704 <_scanf_chars>
 80035de:	2801      	cmp	r0, #1
 80035e0:	d06f      	beq.n	80036c2 <__svfiscanf_r+0x31e>
 80035e2:	2802      	cmp	r0, #2
 80035e4:	f47f af0f 	bne.w	8003406 <__svfiscanf_r+0x62>
 80035e8:	e7c2      	b.n	8003570 <__svfiscanf_r+0x1cc>
 80035ea:	220a      	movs	r2, #10
 80035ec:	e7d7      	b.n	800359e <__svfiscanf_r+0x1fa>
 80035ee:	4629      	mov	r1, r5
 80035f0:	4640      	mov	r0, r8
 80035f2:	f000 fb99 	bl	8003d28 <__sccl>
 80035f6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80035f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035fc:	9341      	str	r3, [sp, #260]	@ 0x104
 80035fe:	4605      	mov	r5, r0
 8003600:	2301      	movs	r3, #1
 8003602:	e7d7      	b.n	80035b4 <__svfiscanf_r+0x210>
 8003604:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800360a:	9341      	str	r3, [sp, #260]	@ 0x104
 800360c:	2300      	movs	r3, #0
 800360e:	e7d1      	b.n	80035b4 <__svfiscanf_r+0x210>
 8003610:	2302      	movs	r3, #2
 8003612:	e7cf      	b.n	80035b4 <__svfiscanf_r+0x210>
 8003614:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003616:	06c3      	lsls	r3, r0, #27
 8003618:	f53f aef5 	bmi.w	8003406 <__svfiscanf_r+0x62>
 800361c:	9b00      	ldr	r3, [sp, #0]
 800361e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003620:	1d19      	adds	r1, r3, #4
 8003622:	9100      	str	r1, [sp, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	07c0      	lsls	r0, r0, #31
 8003628:	bf4c      	ite	mi
 800362a:	801a      	strhmi	r2, [r3, #0]
 800362c:	601a      	strpl	r2, [r3, #0]
 800362e:	e6ea      	b.n	8003406 <__svfiscanf_r+0x62>
 8003630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003632:	07de      	lsls	r6, r3, #31
 8003634:	d405      	bmi.n	8003642 <__svfiscanf_r+0x29e>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	059d      	lsls	r5, r3, #22
 800363a:	d402      	bmi.n	8003642 <__svfiscanf_r+0x29e>
 800363c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800363e:	f7ff fae7 	bl	8002c10 <__retarget_lock_release_recursive>
 8003642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003646:	e79d      	b.n	8003584 <__svfiscanf_r+0x1e0>
 8003648:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800364a:	4621      	mov	r1, r4
 800364c:	4630      	mov	r0, r6
 800364e:	4798      	blx	r3
 8003650:	2800      	cmp	r0, #0
 8003652:	d0b3      	beq.n	80035bc <__svfiscanf_r+0x218>
 8003654:	e78c      	b.n	8003570 <__svfiscanf_r+0x1cc>
 8003656:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003658:	3201      	adds	r2, #1
 800365a:	9245      	str	r2, [sp, #276]	@ 0x114
 800365c:	6862      	ldr	r2, [r4, #4]
 800365e:	3a01      	subs	r2, #1
 8003660:	2a00      	cmp	r2, #0
 8003662:	6062      	str	r2, [r4, #4]
 8003664:	dd0a      	ble.n	800367c <__svfiscanf_r+0x2d8>
 8003666:	3301      	adds	r3, #1
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	e7aa      	b.n	80035c2 <__svfiscanf_r+0x21e>
 800366c:	08003e0f 	.word	0x08003e0f
 8003670:	08003c41 	.word	0x08003c41
 8003674:	080042ad 	.word	0x080042ad
 8003678:	08004264 	.word	0x08004264
 800367c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800367e:	4621      	mov	r1, r4
 8003680:	4630      	mov	r0, r6
 8003682:	4798      	blx	r3
 8003684:	2800      	cmp	r0, #0
 8003686:	d09c      	beq.n	80035c2 <__svfiscanf_r+0x21e>
 8003688:	e772      	b.n	8003570 <__svfiscanf_r+0x1cc>
 800368a:	2b04      	cmp	r3, #4
 800368c:	dc06      	bgt.n	800369c <__svfiscanf_r+0x2f8>
 800368e:	466b      	mov	r3, sp
 8003690:	4622      	mov	r2, r4
 8003692:	a941      	add	r1, sp, #260	@ 0x104
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f88f 	bl	80037b8 <_scanf_i>
 800369a:	e7a0      	b.n	80035de <__svfiscanf_r+0x23a>
 800369c:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <__svfiscanf_r+0x334>)
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f43f aeb1 	beq.w	8003406 <__svfiscanf_r+0x62>
 80036a4:	466b      	mov	r3, sp
 80036a6:	4622      	mov	r2, r4
 80036a8:	a941      	add	r1, sp, #260	@ 0x104
 80036aa:	4630      	mov	r0, r6
 80036ac:	f3af 8000 	nop.w
 80036b0:	e795      	b.n	80035de <__svfiscanf_r+0x23a>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	0598      	lsls	r0, r3, #22
 80036b6:	f53f af5f 	bmi.w	8003578 <__svfiscanf_r+0x1d4>
 80036ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036bc:	f7ff faa8 	bl	8002c10 <__retarget_lock_release_recursive>
 80036c0:	e75a      	b.n	8003578 <__svfiscanf_r+0x1d4>
 80036c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036c4:	07da      	lsls	r2, r3, #31
 80036c6:	d405      	bmi.n	80036d4 <__svfiscanf_r+0x330>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	059b      	lsls	r3, r3, #22
 80036cc:	d402      	bmi.n	80036d4 <__svfiscanf_r+0x330>
 80036ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d0:	f7ff fa9e 	bl	8002c10 <__retarget_lock_release_recursive>
 80036d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80036d6:	e755      	b.n	8003584 <__svfiscanf_r+0x1e0>
 80036d8:	00000000 	.word	0x00000000

080036dc <_vfiscanf_r>:
 80036dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e0:	460d      	mov	r5, r1
 80036e2:	4616      	mov	r6, r2
 80036e4:	461f      	mov	r7, r3
 80036e6:	4604      	mov	r4, r0
 80036e8:	b118      	cbz	r0, 80036f2 <_vfiscanf_r+0x16>
 80036ea:	6a03      	ldr	r3, [r0, #32]
 80036ec:	b90b      	cbnz	r3, 80036f2 <_vfiscanf_r+0x16>
 80036ee:	f7ff f87d 	bl	80027ec <__sinit>
 80036f2:	463b      	mov	r3, r7
 80036f4:	4632      	mov	r2, r6
 80036f6:	4629      	mov	r1, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fe:	f7ff be51 	b.w	80033a4 <__svfiscanf_r>
	...

08003704 <_scanf_chars>:
 8003704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003708:	4615      	mov	r5, r2
 800370a:	688a      	ldr	r2, [r1, #8]
 800370c:	4680      	mov	r8, r0
 800370e:	460c      	mov	r4, r1
 8003710:	b932      	cbnz	r2, 8003720 <_scanf_chars+0x1c>
 8003712:	698a      	ldr	r2, [r1, #24]
 8003714:	2a00      	cmp	r2, #0
 8003716:	bf14      	ite	ne
 8003718:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800371c:	2201      	moveq	r2, #1
 800371e:	608a      	str	r2, [r1, #8]
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80037b4 <_scanf_chars+0xb0>
 8003726:	06d1      	lsls	r1, r2, #27
 8003728:	bf5f      	itttt	pl
 800372a:	681a      	ldrpl	r2, [r3, #0]
 800372c:	1d11      	addpl	r1, r2, #4
 800372e:	6019      	strpl	r1, [r3, #0]
 8003730:	6816      	ldrpl	r6, [r2, #0]
 8003732:	2700      	movs	r7, #0
 8003734:	69a0      	ldr	r0, [r4, #24]
 8003736:	b188      	cbz	r0, 800375c <_scanf_chars+0x58>
 8003738:	2801      	cmp	r0, #1
 800373a:	d107      	bne.n	800374c <_scanf_chars+0x48>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	6963      	ldr	r3, [r4, #20]
 8003742:	5c9b      	ldrb	r3, [r3, r2]
 8003744:	b953      	cbnz	r3, 800375c <_scanf_chars+0x58>
 8003746:	2f00      	cmp	r7, #0
 8003748:	d031      	beq.n	80037ae <_scanf_chars+0xaa>
 800374a:	e022      	b.n	8003792 <_scanf_chars+0x8e>
 800374c:	2802      	cmp	r0, #2
 800374e:	d120      	bne.n	8003792 <_scanf_chars+0x8e>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003758:	071b      	lsls	r3, r3, #28
 800375a:	d41a      	bmi.n	8003792 <_scanf_chars+0x8e>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	06da      	lsls	r2, r3, #27
 8003760:	bf5e      	ittt	pl
 8003762:	682b      	ldrpl	r3, [r5, #0]
 8003764:	781b      	ldrbpl	r3, [r3, #0]
 8003766:	f806 3b01 	strbpl.w	r3, [r6], #1
 800376a:	682a      	ldr	r2, [r5, #0]
 800376c:	686b      	ldr	r3, [r5, #4]
 800376e:	3201      	adds	r2, #1
 8003770:	602a      	str	r2, [r5, #0]
 8003772:	68a2      	ldr	r2, [r4, #8]
 8003774:	3b01      	subs	r3, #1
 8003776:	3a01      	subs	r2, #1
 8003778:	606b      	str	r3, [r5, #4]
 800377a:	3701      	adds	r7, #1
 800377c:	60a2      	str	r2, [r4, #8]
 800377e:	b142      	cbz	r2, 8003792 <_scanf_chars+0x8e>
 8003780:	2b00      	cmp	r3, #0
 8003782:	dcd7      	bgt.n	8003734 <_scanf_chars+0x30>
 8003784:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003788:	4629      	mov	r1, r5
 800378a:	4640      	mov	r0, r8
 800378c:	4798      	blx	r3
 800378e:	2800      	cmp	r0, #0
 8003790:	d0d0      	beq.n	8003734 <_scanf_chars+0x30>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f013 0310 	ands.w	r3, r3, #16
 8003798:	d105      	bne.n	80037a6 <_scanf_chars+0xa2>
 800379a:	68e2      	ldr	r2, [r4, #12]
 800379c:	3201      	adds	r2, #1
 800379e:	60e2      	str	r2, [r4, #12]
 80037a0:	69a2      	ldr	r2, [r4, #24]
 80037a2:	b102      	cbz	r2, 80037a6 <_scanf_chars+0xa2>
 80037a4:	7033      	strb	r3, [r6, #0]
 80037a6:	6923      	ldr	r3, [r4, #16]
 80037a8:	443b      	add	r3, r7
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	2000      	movs	r0, #0
 80037ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b2:	bf00      	nop
 80037b4:	080042ad 	.word	0x080042ad

080037b8 <_scanf_i>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	4698      	mov	r8, r3
 80037be:	4b74      	ldr	r3, [pc, #464]	@ (8003990 <_scanf_i+0x1d8>)
 80037c0:	460c      	mov	r4, r1
 80037c2:	4682      	mov	sl, r0
 80037c4:	4616      	mov	r6, r2
 80037c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037ca:	b087      	sub	sp, #28
 80037cc:	ab03      	add	r3, sp, #12
 80037ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037d2:	4b70      	ldr	r3, [pc, #448]	@ (8003994 <_scanf_i+0x1dc>)
 80037d4:	69a1      	ldr	r1, [r4, #24]
 80037d6:	4a70      	ldr	r2, [pc, #448]	@ (8003998 <_scanf_i+0x1e0>)
 80037d8:	2903      	cmp	r1, #3
 80037da:	bf08      	it	eq
 80037dc:	461a      	moveq	r2, r3
 80037de:	68a3      	ldr	r3, [r4, #8]
 80037e0:	9201      	str	r2, [sp, #4]
 80037e2:	1e5a      	subs	r2, r3, #1
 80037e4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80037e8:	bf88      	it	hi
 80037ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80037ee:	4627      	mov	r7, r4
 80037f0:	bf82      	ittt	hi
 80037f2:	eb03 0905 	addhi.w	r9, r3, r5
 80037f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80037fa:	60a3      	strhi	r3, [r4, #8]
 80037fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003800:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003804:	bf98      	it	ls
 8003806:	f04f 0900 	movls.w	r9, #0
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	463d      	mov	r5, r7
 800380e:	f04f 0b00 	mov.w	fp, #0
 8003812:	6831      	ldr	r1, [r6, #0]
 8003814:	ab03      	add	r3, sp, #12
 8003816:	7809      	ldrb	r1, [r1, #0]
 8003818:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800381c:	2202      	movs	r2, #2
 800381e:	f7fc fcff 	bl	8000220 <memchr>
 8003822:	b328      	cbz	r0, 8003870 <_scanf_i+0xb8>
 8003824:	f1bb 0f01 	cmp.w	fp, #1
 8003828:	d159      	bne.n	80038de <_scanf_i+0x126>
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	b92a      	cbnz	r2, 800383a <_scanf_i+0x82>
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	2108      	movs	r1, #8
 8003832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003836:	6061      	str	r1, [r4, #4]
 8003838:	6022      	str	r2, [r4, #0]
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003840:	6022      	str	r2, [r4, #0]
 8003842:	68a2      	ldr	r2, [r4, #8]
 8003844:	1e51      	subs	r1, r2, #1
 8003846:	60a1      	str	r1, [r4, #8]
 8003848:	b192      	cbz	r2, 8003870 <_scanf_i+0xb8>
 800384a:	6832      	ldr	r2, [r6, #0]
 800384c:	1c51      	adds	r1, r2, #1
 800384e:	6031      	str	r1, [r6, #0]
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	f805 2b01 	strb.w	r2, [r5], #1
 8003856:	6872      	ldr	r2, [r6, #4]
 8003858:	3a01      	subs	r2, #1
 800385a:	2a00      	cmp	r2, #0
 800385c:	6072      	str	r2, [r6, #4]
 800385e:	dc07      	bgt.n	8003870 <_scanf_i+0xb8>
 8003860:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003864:	4631      	mov	r1, r6
 8003866:	4650      	mov	r0, sl
 8003868:	4790      	blx	r2
 800386a:	2800      	cmp	r0, #0
 800386c:	f040 8085 	bne.w	800397a <_scanf_i+0x1c2>
 8003870:	f10b 0b01 	add.w	fp, fp, #1
 8003874:	f1bb 0f03 	cmp.w	fp, #3
 8003878:	d1cb      	bne.n	8003812 <_scanf_i+0x5a>
 800387a:	6863      	ldr	r3, [r4, #4]
 800387c:	b90b      	cbnz	r3, 8003882 <_scanf_i+0xca>
 800387e:	230a      	movs	r3, #10
 8003880:	6063      	str	r3, [r4, #4]
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	4945      	ldr	r1, [pc, #276]	@ (800399c <_scanf_i+0x1e4>)
 8003886:	6960      	ldr	r0, [r4, #20]
 8003888:	1ac9      	subs	r1, r1, r3
 800388a:	f000 fa4d 	bl	8003d28 <__sccl>
 800388e:	f04f 0b00 	mov.w	fp, #0
 8003892:	68a3      	ldr	r3, [r4, #8]
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03d      	beq.n	8003916 <_scanf_i+0x15e>
 800389a:	6831      	ldr	r1, [r6, #0]
 800389c:	6960      	ldr	r0, [r4, #20]
 800389e:	f891 c000 	ldrb.w	ip, [r1]
 80038a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d035      	beq.n	8003916 <_scanf_i+0x15e>
 80038aa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80038ae:	d124      	bne.n	80038fa <_scanf_i+0x142>
 80038b0:	0510      	lsls	r0, r2, #20
 80038b2:	d522      	bpl.n	80038fa <_scanf_i+0x142>
 80038b4:	f10b 0b01 	add.w	fp, fp, #1
 80038b8:	f1b9 0f00 	cmp.w	r9, #0
 80038bc:	d003      	beq.n	80038c6 <_scanf_i+0x10e>
 80038be:	3301      	adds	r3, #1
 80038c0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80038c4:	60a3      	str	r3, [r4, #8]
 80038c6:	6873      	ldr	r3, [r6, #4]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	6073      	str	r3, [r6, #4]
 80038ce:	dd1b      	ble.n	8003908 <_scanf_i+0x150>
 80038d0:	6833      	ldr	r3, [r6, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	68a3      	ldr	r3, [r4, #8]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	e7d9      	b.n	8003892 <_scanf_i+0xda>
 80038de:	f1bb 0f02 	cmp.w	fp, #2
 80038e2:	d1ae      	bne.n	8003842 <_scanf_i+0x8a>
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80038ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80038ee:	d1bf      	bne.n	8003870 <_scanf_i+0xb8>
 80038f0:	2110      	movs	r1, #16
 80038f2:	6061      	str	r1, [r4, #4]
 80038f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038f8:	e7a2      	b.n	8003840 <_scanf_i+0x88>
 80038fa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80038fe:	6022      	str	r2, [r4, #0]
 8003900:	780b      	ldrb	r3, [r1, #0]
 8003902:	f805 3b01 	strb.w	r3, [r5], #1
 8003906:	e7de      	b.n	80038c6 <_scanf_i+0x10e>
 8003908:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800390c:	4631      	mov	r1, r6
 800390e:	4650      	mov	r0, sl
 8003910:	4798      	blx	r3
 8003912:	2800      	cmp	r0, #0
 8003914:	d0df      	beq.n	80038d6 <_scanf_i+0x11e>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	05d9      	lsls	r1, r3, #23
 800391a:	d50d      	bpl.n	8003938 <_scanf_i+0x180>
 800391c:	42bd      	cmp	r5, r7
 800391e:	d909      	bls.n	8003934 <_scanf_i+0x17c>
 8003920:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003924:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003928:	4632      	mov	r2, r6
 800392a:	4650      	mov	r0, sl
 800392c:	4798      	blx	r3
 800392e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8003932:	464d      	mov	r5, r9
 8003934:	42bd      	cmp	r5, r7
 8003936:	d028      	beq.n	800398a <_scanf_i+0x1d2>
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	f012 0210 	ands.w	r2, r2, #16
 800393e:	d113      	bne.n	8003968 <_scanf_i+0x1b0>
 8003940:	702a      	strb	r2, [r5, #0]
 8003942:	6863      	ldr	r3, [r4, #4]
 8003944:	9e01      	ldr	r6, [sp, #4]
 8003946:	4639      	mov	r1, r7
 8003948:	4650      	mov	r0, sl
 800394a:	47b0      	blx	r6
 800394c:	f8d8 3000 	ldr.w	r3, [r8]
 8003950:	6821      	ldr	r1, [r4, #0]
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	f8c8 2000 	str.w	r2, [r8]
 8003958:	f011 0f20 	tst.w	r1, #32
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	d00f      	beq.n	8003980 <_scanf_i+0x1c8>
 8003960:	6018      	str	r0, [r3, #0]
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60e3      	str	r3, [r4, #12]
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	1bed      	subs	r5, r5, r7
 800396c:	445d      	add	r5, fp
 800396e:	442b      	add	r3, r5
 8003970:	6123      	str	r3, [r4, #16]
 8003972:	2000      	movs	r0, #0
 8003974:	b007      	add	sp, #28
 8003976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397a:	f04f 0b00 	mov.w	fp, #0
 800397e:	e7ca      	b.n	8003916 <_scanf_i+0x15e>
 8003980:	07ca      	lsls	r2, r1, #31
 8003982:	bf4c      	ite	mi
 8003984:	8018      	strhmi	r0, [r3, #0]
 8003986:	6018      	strpl	r0, [r3, #0]
 8003988:	e7eb      	b.n	8003962 <_scanf_i+0x1aa>
 800398a:	2001      	movs	r0, #1
 800398c:	e7f2      	b.n	8003974 <_scanf_i+0x1bc>
 800398e:	bf00      	nop
 8003990:	08004220 	.word	0x08004220
 8003994:	080040dd 	.word	0x080040dd
 8003998:	080041bd 	.word	0x080041bd
 800399c:	080042a1 	.word	0x080042a1

080039a0 <__sflush_r>:
 80039a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a8:	0716      	lsls	r6, r2, #28
 80039aa:	4605      	mov	r5, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	d454      	bmi.n	8003a5a <__sflush_r+0xba>
 80039b0:	684b      	ldr	r3, [r1, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	dc02      	bgt.n	80039bc <__sflush_r+0x1c>
 80039b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	dd48      	ble.n	8003a4e <__sflush_r+0xae>
 80039bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039be:	2e00      	cmp	r6, #0
 80039c0:	d045      	beq.n	8003a4e <__sflush_r+0xae>
 80039c2:	2300      	movs	r3, #0
 80039c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039c8:	682f      	ldr	r7, [r5, #0]
 80039ca:	6a21      	ldr	r1, [r4, #32]
 80039cc:	602b      	str	r3, [r5, #0]
 80039ce:	d030      	beq.n	8003a32 <__sflush_r+0x92>
 80039d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	0759      	lsls	r1, r3, #29
 80039d6:	d505      	bpl.n	80039e4 <__sflush_r+0x44>
 80039d8:	6863      	ldr	r3, [r4, #4]
 80039da:	1ad2      	subs	r2, r2, r3
 80039dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039de:	b10b      	cbz	r3, 80039e4 <__sflush_r+0x44>
 80039e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039e8:	6a21      	ldr	r1, [r4, #32]
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b0      	blx	r6
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	d106      	bne.n	8003a02 <__sflush_r+0x62>
 80039f4:	6829      	ldr	r1, [r5, #0]
 80039f6:	291d      	cmp	r1, #29
 80039f8:	d82b      	bhi.n	8003a52 <__sflush_r+0xb2>
 80039fa:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa4 <__sflush_r+0x104>)
 80039fc:	410a      	asrs	r2, r1
 80039fe:	07d6      	lsls	r6, r2, #31
 8003a00:	d427      	bmi.n	8003a52 <__sflush_r+0xb2>
 8003a02:	2200      	movs	r2, #0
 8003a04:	6062      	str	r2, [r4, #4]
 8003a06:	04d9      	lsls	r1, r3, #19
 8003a08:	6922      	ldr	r2, [r4, #16]
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	d504      	bpl.n	8003a18 <__sflush_r+0x78>
 8003a0e:	1c42      	adds	r2, r0, #1
 8003a10:	d101      	bne.n	8003a16 <__sflush_r+0x76>
 8003a12:	682b      	ldr	r3, [r5, #0]
 8003a14:	b903      	cbnz	r3, 8003a18 <__sflush_r+0x78>
 8003a16:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a1a:	602f      	str	r7, [r5, #0]
 8003a1c:	b1b9      	cbz	r1, 8003a4e <__sflush_r+0xae>
 8003a1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a22:	4299      	cmp	r1, r3
 8003a24:	d002      	beq.n	8003a2c <__sflush_r+0x8c>
 8003a26:	4628      	mov	r0, r5
 8003a28:	f7ff f8f4 	bl	8002c14 <_free_r>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a30:	e00d      	b.n	8003a4e <__sflush_r+0xae>
 8003a32:	2301      	movs	r3, #1
 8003a34:	4628      	mov	r0, r5
 8003a36:	47b0      	blx	r6
 8003a38:	4602      	mov	r2, r0
 8003a3a:	1c50      	adds	r0, r2, #1
 8003a3c:	d1c9      	bne.n	80039d2 <__sflush_r+0x32>
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0c6      	beq.n	80039d2 <__sflush_r+0x32>
 8003a44:	2b1d      	cmp	r3, #29
 8003a46:	d001      	beq.n	8003a4c <__sflush_r+0xac>
 8003a48:	2b16      	cmp	r3, #22
 8003a4a:	d11e      	bne.n	8003a8a <__sflush_r+0xea>
 8003a4c:	602f      	str	r7, [r5, #0]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e022      	b.n	8003a98 <__sflush_r+0xf8>
 8003a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a56:	b21b      	sxth	r3, r3
 8003a58:	e01b      	b.n	8003a92 <__sflush_r+0xf2>
 8003a5a:	690f      	ldr	r7, [r1, #16]
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	d0f6      	beq.n	8003a4e <__sflush_r+0xae>
 8003a60:	0793      	lsls	r3, r2, #30
 8003a62:	680e      	ldr	r6, [r1, #0]
 8003a64:	bf08      	it	eq
 8003a66:	694b      	ldreq	r3, [r1, #20]
 8003a68:	600f      	str	r7, [r1, #0]
 8003a6a:	bf18      	it	ne
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	eba6 0807 	sub.w	r8, r6, r7
 8003a72:	608b      	str	r3, [r1, #8]
 8003a74:	f1b8 0f00 	cmp.w	r8, #0
 8003a78:	dde9      	ble.n	8003a4e <__sflush_r+0xae>
 8003a7a:	6a21      	ldr	r1, [r4, #32]
 8003a7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a7e:	4643      	mov	r3, r8
 8003a80:	463a      	mov	r2, r7
 8003a82:	4628      	mov	r0, r5
 8003a84:	47b0      	blx	r6
 8003a86:	2800      	cmp	r0, #0
 8003a88:	dc08      	bgt.n	8003a9c <__sflush_r+0xfc>
 8003a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a92:	81a3      	strh	r3, [r4, #12]
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9c:	4407      	add	r7, r0
 8003a9e:	eba8 0800 	sub.w	r8, r8, r0
 8003aa2:	e7e7      	b.n	8003a74 <__sflush_r+0xd4>
 8003aa4:	dfbffffe 	.word	0xdfbffffe

08003aa8 <_fflush_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	4605      	mov	r5, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	b913      	cbnz	r3, 8003ab8 <_fflush_r+0x10>
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	b118      	cbz	r0, 8003ac2 <_fflush_r+0x1a>
 8003aba:	6a03      	ldr	r3, [r0, #32]
 8003abc:	b90b      	cbnz	r3, 8003ac2 <_fflush_r+0x1a>
 8003abe:	f7fe fe95 	bl	80027ec <__sinit>
 8003ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f3      	beq.n	8003ab2 <_fflush_r+0xa>
 8003aca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003acc:	07d0      	lsls	r0, r2, #31
 8003ace:	d404      	bmi.n	8003ada <_fflush_r+0x32>
 8003ad0:	0599      	lsls	r1, r3, #22
 8003ad2:	d402      	bmi.n	8003ada <_fflush_r+0x32>
 8003ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ad6:	f7ff f89a 	bl	8002c0e <__retarget_lock_acquire_recursive>
 8003ada:	4628      	mov	r0, r5
 8003adc:	4621      	mov	r1, r4
 8003ade:	f7ff ff5f 	bl	80039a0 <__sflush_r>
 8003ae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ae4:	07da      	lsls	r2, r3, #31
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	d4e4      	bmi.n	8003ab4 <_fflush_r+0xc>
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	059b      	lsls	r3, r3, #22
 8003aee:	d4e1      	bmi.n	8003ab4 <_fflush_r+0xc>
 8003af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003af2:	f7ff f88d 	bl	8002c10 <__retarget_lock_release_recursive>
 8003af6:	e7dd      	b.n	8003ab4 <_fflush_r+0xc>

08003af8 <__swhatbuf_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	460c      	mov	r4, r1
 8003afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b00:	2900      	cmp	r1, #0
 8003b02:	b096      	sub	sp, #88	@ 0x58
 8003b04:	4615      	mov	r5, r2
 8003b06:	461e      	mov	r6, r3
 8003b08:	da0d      	bge.n	8003b26 <__swhatbuf_r+0x2e>
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2340      	movne	r3, #64	@ 0x40
 8003b18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	6031      	str	r1, [r6, #0]
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	b016      	add	sp, #88	@ 0x58
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
 8003b26:	466a      	mov	r2, sp
 8003b28:	f000 f9f0 	bl	8003f0c <_fstat_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	dbec      	blt.n	8003b0a <__swhatbuf_r+0x12>
 8003b30:	9901      	ldr	r1, [sp, #4]
 8003b32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b3a:	4259      	negs	r1, r3
 8003b3c:	4159      	adcs	r1, r3
 8003b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b42:	e7eb      	b.n	8003b1c <__swhatbuf_r+0x24>

08003b44 <__smakebuf_r>:
 8003b44:	898b      	ldrh	r3, [r1, #12]
 8003b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b48:	079d      	lsls	r5, r3, #30
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	d507      	bpl.n	8003b60 <__smakebuf_r+0x1c>
 8003b50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	2301      	movs	r3, #1
 8003b5a:	6163      	str	r3, [r4, #20]
 8003b5c:	b003      	add	sp, #12
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b60:	ab01      	add	r3, sp, #4
 8003b62:	466a      	mov	r2, sp
 8003b64:	f7ff ffc8 	bl	8003af8 <__swhatbuf_r>
 8003b68:	9f00      	ldr	r7, [sp, #0]
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff f8bc 	bl	8002cec <_malloc_r>
 8003b74:	b948      	cbnz	r0, 8003b8a <__smakebuf_r+0x46>
 8003b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7a:	059a      	lsls	r2, r3, #22
 8003b7c:	d4ee      	bmi.n	8003b5c <__smakebuf_r+0x18>
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	e7e2      	b.n	8003b50 <__smakebuf_r+0xc>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	6020      	str	r0, [r4, #0]
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	9b01      	ldr	r3, [sp, #4]
 8003b96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b9a:	b15b      	cbz	r3, 8003bb4 <__smakebuf_r+0x70>
 8003b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f9c5 	bl	8003f30 <_isatty_r>
 8003ba6:	b128      	cbz	r0, 8003bb4 <__smakebuf_r+0x70>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	431d      	orrs	r5, r3
 8003bb8:	81a5      	strh	r5, [r4, #12]
 8003bba:	e7cf      	b.n	8003b5c <__smakebuf_r+0x18>

08003bbc <_putc_r>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	460d      	mov	r5, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	b118      	cbz	r0, 8003bce <_putc_r+0x12>
 8003bc6:	6a03      	ldr	r3, [r0, #32]
 8003bc8:	b90b      	cbnz	r3, 8003bce <_putc_r+0x12>
 8003bca:	f7fe fe0f 	bl	80027ec <__sinit>
 8003bce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bd0:	07d8      	lsls	r0, r3, #31
 8003bd2:	d405      	bmi.n	8003be0 <_putc_r+0x24>
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	0599      	lsls	r1, r3, #22
 8003bd8:	d402      	bmi.n	8003be0 <_putc_r+0x24>
 8003bda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bdc:	f7ff f817 	bl	8002c0e <__retarget_lock_acquire_recursive>
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	60a3      	str	r3, [r4, #8]
 8003be8:	da05      	bge.n	8003bf6 <_putc_r+0x3a>
 8003bea:	69a2      	ldr	r2, [r4, #24]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	db12      	blt.n	8003c16 <_putc_r+0x5a>
 8003bf0:	b2eb      	uxtb	r3, r5
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d00f      	beq.n	8003c16 <_putc_r+0x5a>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	6022      	str	r2, [r4, #0]
 8003bfc:	701d      	strb	r5, [r3, #0]
 8003bfe:	b2ed      	uxtb	r5, r5
 8003c00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c02:	07da      	lsls	r2, r3, #31
 8003c04:	d405      	bmi.n	8003c12 <_putc_r+0x56>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	059b      	lsls	r3, r3, #22
 8003c0a:	d402      	bmi.n	8003c12 <_putc_r+0x56>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c0e:	f7fe ffff 	bl	8002c10 <__retarget_lock_release_recursive>
 8003c12:	4628      	mov	r0, r5
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	4629      	mov	r1, r5
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f7fe fee9 	bl	80029f2 <__swbuf_r>
 8003c20:	4605      	mov	r5, r0
 8003c22:	e7ed      	b.n	8003c00 <_putc_r+0x44>

08003c24 <lflush>:
 8003c24:	898b      	ldrh	r3, [r1, #12]
 8003c26:	f003 0309 	and.w	r3, r3, #9
 8003c2a:	2b09      	cmp	r3, #9
 8003c2c:	d103      	bne.n	8003c36 <lflush+0x12>
 8003c2e:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <lflush+0x18>)
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	f7ff bf39 	b.w	8003aa8 <_fflush_r>
 8003c36:	2000      	movs	r0, #0
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000020 	.word	0x20000020

08003c40 <__srefill_r>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	460c      	mov	r4, r1
 8003c44:	4605      	mov	r5, r0
 8003c46:	b118      	cbz	r0, 8003c50 <__srefill_r+0x10>
 8003c48:	6a03      	ldr	r3, [r0, #32]
 8003c4a:	b90b      	cbnz	r3, 8003c50 <__srefill_r+0x10>
 8003c4c:	f7fe fdce 	bl	80027ec <__sinit>
 8003c50:	2300      	movs	r3, #0
 8003c52:	6063      	str	r3, [r4, #4]
 8003c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c58:	069e      	lsls	r6, r3, #26
 8003c5a:	d408      	bmi.n	8003c6e <__srefill_r+0x2e>
 8003c5c:	0758      	lsls	r0, r3, #29
 8003c5e:	d445      	bmi.n	8003cec <__srefill_r+0xac>
 8003c60:	06d9      	lsls	r1, r3, #27
 8003c62:	d407      	bmi.n	8003c74 <__srefill_r+0x34>
 8003c64:	2209      	movs	r2, #9
 8003c66:	602a      	str	r2, [r5, #0]
 8003c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6c:	81a3      	strh	r3, [r4, #12]
 8003c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	071a      	lsls	r2, r3, #28
 8003c76:	d50b      	bpl.n	8003c90 <__srefill_r+0x50>
 8003c78:	4621      	mov	r1, r4
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7ff ff14 	bl	8003aa8 <_fflush_r>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d1f4      	bne.n	8003c6e <__srefill_r+0x2e>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	60a0      	str	r0, [r4, #8]
 8003c88:	f023 0308 	bic.w	r3, r3, #8
 8003c8c:	81a3      	strh	r3, [r4, #12]
 8003c8e:	61a0      	str	r0, [r4, #24]
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	b91b      	cbnz	r3, 8003ca4 <__srefill_r+0x64>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f7ff ff50 	bl	8003b44 <__smakebuf_r>
 8003ca4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8003ca8:	07b3      	lsls	r3, r6, #30
 8003caa:	d00f      	beq.n	8003ccc <__srefill_r+0x8c>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <__srefill_r+0xdc>)
 8003cb0:	491b      	ldr	r1, [pc, #108]	@ (8003d20 <__srefill_r+0xe0>)
 8003cb2:	481c      	ldr	r0, [pc, #112]	@ (8003d24 <__srefill_r+0xe4>)
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	f7fe fdb1 	bl	800281c <_fwalk_sglue>
 8003cba:	81a6      	strh	r6, [r4, #12]
 8003cbc:	f006 0609 	and.w	r6, r6, #9
 8003cc0:	2e09      	cmp	r6, #9
 8003cc2:	d103      	bne.n	8003ccc <__srefill_r+0x8c>
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f7ff fe6a 	bl	80039a0 <__sflush_r>
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003cd0:	6963      	ldr	r3, [r4, #20]
 8003cd2:	6a21      	ldr	r1, [r4, #32]
 8003cd4:	6022      	str	r2, [r4, #0]
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	47b0      	blx	r6
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	6060      	str	r0, [r4, #4]
 8003cde:	dc17      	bgt.n	8003d10 <__srefill_r+0xd0>
 8003ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce4:	d116      	bne.n	8003d14 <__srefill_r+0xd4>
 8003ce6:	f043 0320 	orr.w	r3, r3, #32
 8003cea:	e7bf      	b.n	8003c6c <__srefill_r+0x2c>
 8003cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d0d2      	beq.n	8003c98 <__srefill_r+0x58>
 8003cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	d002      	beq.n	8003d00 <__srefill_r+0xc0>
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7fe ff8a 	bl	8002c14 <_free_r>
 8003d00:	2300      	movs	r3, #0
 8003d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d06:	6063      	str	r3, [r4, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0c5      	beq.n	8003c98 <__srefill_r+0x58>
 8003d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	2000      	movs	r0, #0
 8003d12:	e7ae      	b.n	8003c72 <__srefill_r+0x32>
 8003d14:	2200      	movs	r2, #0
 8003d16:	6062      	str	r2, [r4, #4]
 8003d18:	e7a6      	b.n	8003c68 <__srefill_r+0x28>
 8003d1a:	bf00      	nop
 8003d1c:	20000014 	.word	0x20000014
 8003d20:	08003c25 	.word	0x08003c25
 8003d24:	20000024 	.word	0x20000024

08003d28 <__sccl>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	780b      	ldrb	r3, [r1, #0]
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	2b5e      	cmp	r3, #94	@ 0x5e
 8003d30:	bf0b      	itete	eq
 8003d32:	784b      	ldrbeq	r3, [r1, #1]
 8003d34:	1c4a      	addne	r2, r1, #1
 8003d36:	1c8a      	addeq	r2, r1, #2
 8003d38:	2100      	movne	r1, #0
 8003d3a:	bf08      	it	eq
 8003d3c:	2101      	moveq	r1, #1
 8003d3e:	3801      	subs	r0, #1
 8003d40:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003d44:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003d48:	42a8      	cmp	r0, r5
 8003d4a:	d1fb      	bne.n	8003d44 <__sccl+0x1c>
 8003d4c:	b90b      	cbnz	r3, 8003d52 <__sccl+0x2a>
 8003d4e:	1e50      	subs	r0, r2, #1
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	f081 0101 	eor.w	r1, r1, #1
 8003d56:	54e1      	strb	r1, [r4, r3]
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d60:	2d2d      	cmp	r5, #45	@ 0x2d
 8003d62:	d005      	beq.n	8003d70 <__sccl+0x48>
 8003d64:	2d5d      	cmp	r5, #93	@ 0x5d
 8003d66:	d016      	beq.n	8003d96 <__sccl+0x6e>
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	d0f1      	beq.n	8003d50 <__sccl+0x28>
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	e7f2      	b.n	8003d56 <__sccl+0x2e>
 8003d70:	7846      	ldrb	r6, [r0, #1]
 8003d72:	2e5d      	cmp	r6, #93	@ 0x5d
 8003d74:	d0fa      	beq.n	8003d6c <__sccl+0x44>
 8003d76:	42b3      	cmp	r3, r6
 8003d78:	dcf8      	bgt.n	8003d6c <__sccl+0x44>
 8003d7a:	3002      	adds	r0, #2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	3201      	adds	r2, #1
 8003d80:	4296      	cmp	r6, r2
 8003d82:	54a1      	strb	r1, [r4, r2]
 8003d84:	dcfb      	bgt.n	8003d7e <__sccl+0x56>
 8003d86:	1af2      	subs	r2, r6, r3
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	1c5d      	adds	r5, r3, #1
 8003d8c:	42b3      	cmp	r3, r6
 8003d8e:	bfa8      	it	ge
 8003d90:	2200      	movge	r2, #0
 8003d92:	18ab      	adds	r3, r5, r2
 8003d94:	e7e1      	b.n	8003d5a <__sccl+0x32>
 8003d96:	4610      	mov	r0, r2
 8003d98:	e7da      	b.n	8003d50 <__sccl+0x28>

08003d9a <__submore>:
 8003d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9e:	460c      	mov	r4, r1
 8003da0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003da6:	4299      	cmp	r1, r3
 8003da8:	d11d      	bne.n	8003de6 <__submore+0x4c>
 8003daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dae:	f7fe ff9d 	bl	8002cec <_malloc_r>
 8003db2:	b918      	cbnz	r0, 8003dbc <__submore+0x22>
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dc0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003dc2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003dc6:	6360      	str	r0, [r4, #52]	@ 0x34
 8003dc8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003dcc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003dd0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8003dd4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003dd8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8003ddc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003de0:	6020      	str	r0, [r4, #0]
 8003de2:	2000      	movs	r0, #0
 8003de4:	e7e8      	b.n	8003db8 <__submore+0x1e>
 8003de6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003de8:	0077      	lsls	r7, r6, #1
 8003dea:	463a      	mov	r2, r7
 8003dec:	f000 f8ce 	bl	8003f8c <_realloc_r>
 8003df0:	4605      	mov	r5, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0de      	beq.n	8003db4 <__submore+0x1a>
 8003df6:	eb00 0806 	add.w	r8, r0, r6
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	4640      	mov	r0, r8
 8003e00:	f000 f8b6 	bl	8003f70 <memcpy>
 8003e04:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003e08:	f8c4 8000 	str.w	r8, [r4]
 8003e0c:	e7e9      	b.n	8003de2 <__submore+0x48>

08003e0e <_ungetc_r>:
 8003e0e:	b570      	push	{r4, r5, r6, lr}
 8003e10:	460d      	mov	r5, r1
 8003e12:	1c69      	adds	r1, r5, #1
 8003e14:	4606      	mov	r6, r0
 8003e16:	4614      	mov	r4, r2
 8003e18:	d01e      	beq.n	8003e58 <_ungetc_r+0x4a>
 8003e1a:	b118      	cbz	r0, 8003e24 <_ungetc_r+0x16>
 8003e1c:	6a03      	ldr	r3, [r0, #32]
 8003e1e:	b90b      	cbnz	r3, 8003e24 <_ungetc_r+0x16>
 8003e20:	f7fe fce4 	bl	80027ec <__sinit>
 8003e24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e26:	07da      	lsls	r2, r3, #31
 8003e28:	d405      	bmi.n	8003e36 <_ungetc_r+0x28>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	059b      	lsls	r3, r3, #22
 8003e2e:	d402      	bmi.n	8003e36 <_ungetc_r+0x28>
 8003e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e32:	f7fe feec 	bl	8002c0e <__retarget_lock_acquire_recursive>
 8003e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e3a:	f023 0220 	bic.w	r2, r3, #32
 8003e3e:	0758      	lsls	r0, r3, #29
 8003e40:	81a2      	strh	r2, [r4, #12]
 8003e42:	d422      	bmi.n	8003e8a <_ungetc_r+0x7c>
 8003e44:	06d9      	lsls	r1, r3, #27
 8003e46:	d40a      	bmi.n	8003e5e <_ungetc_r+0x50>
 8003e48:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e4a:	07d2      	lsls	r2, r2, #31
 8003e4c:	d404      	bmi.n	8003e58 <_ungetc_r+0x4a>
 8003e4e:	0599      	lsls	r1, r3, #22
 8003e50:	d402      	bmi.n	8003e58 <_ungetc_r+0x4a>
 8003e52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e54:	f7fe fedc 	bl	8002c10 <__retarget_lock_release_recursive>
 8003e58:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003e5c:	e046      	b.n	8003eec <_ungetc_r+0xde>
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	d50f      	bpl.n	8003e82 <_ungetc_r+0x74>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4630      	mov	r0, r6
 8003e66:	f7ff fe1f 	bl	8003aa8 <_fflush_r>
 8003e6a:	b120      	cbz	r0, 8003e76 <_ungetc_r+0x68>
 8003e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e6e:	07d8      	lsls	r0, r3, #31
 8003e70:	d4f2      	bmi.n	8003e58 <_ungetc_r+0x4a>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	e7eb      	b.n	8003e4e <_ungetc_r+0x40>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	60a0      	str	r0, [r4, #8]
 8003e7a:	f023 0308 	bic.w	r3, r3, #8
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	61a0      	str	r0, [r4, #24]
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e8c:	6862      	ldr	r2, [r4, #4]
 8003e8e:	b2ed      	uxtb	r5, r5
 8003e90:	b1d3      	cbz	r3, 8003ec8 <_ungetc_r+0xba>
 8003e92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e94:	4293      	cmp	r3, r2
 8003e96:	dc05      	bgt.n	8003ea4 <_ungetc_r+0x96>
 8003e98:	4621      	mov	r1, r4
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7ff ff7d 	bl	8003d9a <__submore>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d1e3      	bne.n	8003e6c <_ungetc_r+0x5e>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	1e5a      	subs	r2, r3, #1
 8003ea8:	6022      	str	r2, [r4, #0]
 8003eaa:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	6063      	str	r3, [r4, #4]
 8003eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eb6:	07da      	lsls	r2, r3, #31
 8003eb8:	d418      	bmi.n	8003eec <_ungetc_r+0xde>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	059b      	lsls	r3, r3, #22
 8003ebe:	d415      	bmi.n	8003eec <_ungetc_r+0xde>
 8003ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec2:	f7fe fea5 	bl	8002c10 <__retarget_lock_release_recursive>
 8003ec6:	e011      	b.n	8003eec <_ungetc_r+0xde>
 8003ec8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003eca:	6920      	ldr	r0, [r4, #16]
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f001 0101 	and.w	r1, r1, #1
 8003ed2:	b168      	cbz	r0, 8003ef0 <_ungetc_r+0xe2>
 8003ed4:	4298      	cmp	r0, r3
 8003ed6:	d20b      	bcs.n	8003ef0 <_ungetc_r+0xe2>
 8003ed8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003edc:	42a8      	cmp	r0, r5
 8003ede:	d107      	bne.n	8003ef0 <_ungetc_r+0xe2>
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	3201      	adds	r2, #1
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	6062      	str	r2, [r4, #4]
 8003ee8:	2900      	cmp	r1, #0
 8003eea:	d0e6      	beq.n	8003eba <_ungetc_r+0xac>
 8003eec:	4628      	mov	r0, r5
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8003ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003efa:	2303      	movs	r3, #3
 8003efc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003efe:	4623      	mov	r3, r4
 8003f00:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	2301      	movs	r3, #1
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	e7ed      	b.n	8003ee8 <_ungetc_r+0xda>

08003f0c <_fstat_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4d07      	ldr	r5, [pc, #28]	@ (8003f2c <_fstat_r+0x20>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	602b      	str	r3, [r5, #0]
 8003f1a:	f7fe fa5a 	bl	80023d2 <_fstat>
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d102      	bne.n	8003f28 <_fstat_r+0x1c>
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	b103      	cbz	r3, 8003f28 <_fstat_r+0x1c>
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	bd38      	pop	{r3, r4, r5, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200002c4 	.word	0x200002c4

08003f30 <_isatty_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4d06      	ldr	r5, [pc, #24]	@ (8003f4c <_isatty_r+0x1c>)
 8003f34:	2300      	movs	r3, #0
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	f7fe fbac 	bl	8002698 <_isatty>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_isatty_r+0x1a>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_isatty_r+0x1a>
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	200002c4 	.word	0x200002c4

08003f50 <_sbrk_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4d06      	ldr	r5, [pc, #24]	@ (8003f6c <_sbrk_r+0x1c>)
 8003f54:	2300      	movs	r3, #0
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	602b      	str	r3, [r5, #0]
 8003f5c:	f7fc fd00 	bl	8000960 <_sbrk>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d102      	bne.n	8003f6a <_sbrk_r+0x1a>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	b103      	cbz	r3, 8003f6a <_sbrk_r+0x1a>
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	200002c4 	.word	0x200002c4

08003f70 <memcpy>:
 8003f70:	440a      	add	r2, r1
 8003f72:	4291      	cmp	r1, r2
 8003f74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003f78:	d100      	bne.n	8003f7c <memcpy+0xc>
 8003f7a:	4770      	bx	lr
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f86:	4291      	cmp	r1, r2
 8003f88:	d1f9      	bne.n	8003f7e <memcpy+0xe>
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <_realloc_r>:
 8003f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f90:	4680      	mov	r8, r0
 8003f92:	4615      	mov	r5, r2
 8003f94:	460c      	mov	r4, r1
 8003f96:	b921      	cbnz	r1, 8003fa2 <_realloc_r+0x16>
 8003f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	f7fe bea5 	b.w	8002cec <_malloc_r>
 8003fa2:	b92a      	cbnz	r2, 8003fb0 <_realloc_r+0x24>
 8003fa4:	f7fe fe36 	bl	8002c14 <_free_r>
 8003fa8:	2400      	movs	r4, #0
 8003faa:	4620      	mov	r0, r4
 8003fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb0:	f000 f906 	bl	80041c0 <_malloc_usable_size_r>
 8003fb4:	4285      	cmp	r5, r0
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	d802      	bhi.n	8003fc0 <_realloc_r+0x34>
 8003fba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003fbe:	d8f4      	bhi.n	8003faa <_realloc_r+0x1e>
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	f7fe fe92 	bl	8002cec <_malloc_r>
 8003fc8:	4607      	mov	r7, r0
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d0ec      	beq.n	8003fa8 <_realloc_r+0x1c>
 8003fce:	42b5      	cmp	r5, r6
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	bf28      	it	cs
 8003fd6:	4632      	movcs	r2, r6
 8003fd8:	f7ff ffca 	bl	8003f70 <memcpy>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4640      	mov	r0, r8
 8003fe0:	f7fe fe18 	bl	8002c14 <_free_r>
 8003fe4:	463c      	mov	r4, r7
 8003fe6:	e7e0      	b.n	8003faa <_realloc_r+0x1e>

08003fe8 <_strtol_l.constprop.0>:
 8003fe8:	2b24      	cmp	r3, #36	@ 0x24
 8003fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fee:	4686      	mov	lr, r0
 8003ff0:	4690      	mov	r8, r2
 8003ff2:	d801      	bhi.n	8003ff8 <_strtol_l.constprop.0+0x10>
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <_strtol_l.constprop.0+0x1e>
 8003ff8:	f7fe fdde 	bl	8002bb8 <__errno>
 8003ffc:	2316      	movs	r3, #22
 8003ffe:	6003      	str	r3, [r0, #0]
 8004000:	2000      	movs	r0, #0
 8004002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004006:	4834      	ldr	r0, [pc, #208]	@ (80040d8 <_strtol_l.constprop.0+0xf0>)
 8004008:	460d      	mov	r5, r1
 800400a:	462a      	mov	r2, r5
 800400c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004010:	5d06      	ldrb	r6, [r0, r4]
 8004012:	f016 0608 	ands.w	r6, r6, #8
 8004016:	d1f8      	bne.n	800400a <_strtol_l.constprop.0+0x22>
 8004018:	2c2d      	cmp	r4, #45	@ 0x2d
 800401a:	d12d      	bne.n	8004078 <_strtol_l.constprop.0+0x90>
 800401c:	782c      	ldrb	r4, [r5, #0]
 800401e:	2601      	movs	r6, #1
 8004020:	1c95      	adds	r5, r2, #2
 8004022:	f033 0210 	bics.w	r2, r3, #16
 8004026:	d109      	bne.n	800403c <_strtol_l.constprop.0+0x54>
 8004028:	2c30      	cmp	r4, #48	@ 0x30
 800402a:	d12a      	bne.n	8004082 <_strtol_l.constprop.0+0x9a>
 800402c:	782a      	ldrb	r2, [r5, #0]
 800402e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004032:	2a58      	cmp	r2, #88	@ 0x58
 8004034:	d125      	bne.n	8004082 <_strtol_l.constprop.0+0x9a>
 8004036:	786c      	ldrb	r4, [r5, #1]
 8004038:	2310      	movs	r3, #16
 800403a:	3502      	adds	r5, #2
 800403c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004040:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004044:	2200      	movs	r2, #0
 8004046:	fbbc f9f3 	udiv	r9, ip, r3
 800404a:	4610      	mov	r0, r2
 800404c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004050:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004054:	2f09      	cmp	r7, #9
 8004056:	d81b      	bhi.n	8004090 <_strtol_l.constprop.0+0xa8>
 8004058:	463c      	mov	r4, r7
 800405a:	42a3      	cmp	r3, r4
 800405c:	dd27      	ble.n	80040ae <_strtol_l.constprop.0+0xc6>
 800405e:	1c57      	adds	r7, r2, #1
 8004060:	d007      	beq.n	8004072 <_strtol_l.constprop.0+0x8a>
 8004062:	4581      	cmp	r9, r0
 8004064:	d320      	bcc.n	80040a8 <_strtol_l.constprop.0+0xc0>
 8004066:	d101      	bne.n	800406c <_strtol_l.constprop.0+0x84>
 8004068:	45a2      	cmp	sl, r4
 800406a:	db1d      	blt.n	80040a8 <_strtol_l.constprop.0+0xc0>
 800406c:	fb00 4003 	mla	r0, r0, r3, r4
 8004070:	2201      	movs	r2, #1
 8004072:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004076:	e7eb      	b.n	8004050 <_strtol_l.constprop.0+0x68>
 8004078:	2c2b      	cmp	r4, #43	@ 0x2b
 800407a:	bf04      	itt	eq
 800407c:	782c      	ldrbeq	r4, [r5, #0]
 800407e:	1c95      	addeq	r5, r2, #2
 8004080:	e7cf      	b.n	8004022 <_strtol_l.constprop.0+0x3a>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1da      	bne.n	800403c <_strtol_l.constprop.0+0x54>
 8004086:	2c30      	cmp	r4, #48	@ 0x30
 8004088:	bf0c      	ite	eq
 800408a:	2308      	moveq	r3, #8
 800408c:	230a      	movne	r3, #10
 800408e:	e7d5      	b.n	800403c <_strtol_l.constprop.0+0x54>
 8004090:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004094:	2f19      	cmp	r7, #25
 8004096:	d801      	bhi.n	800409c <_strtol_l.constprop.0+0xb4>
 8004098:	3c37      	subs	r4, #55	@ 0x37
 800409a:	e7de      	b.n	800405a <_strtol_l.constprop.0+0x72>
 800409c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80040a0:	2f19      	cmp	r7, #25
 80040a2:	d804      	bhi.n	80040ae <_strtol_l.constprop.0+0xc6>
 80040a4:	3c57      	subs	r4, #87	@ 0x57
 80040a6:	e7d8      	b.n	800405a <_strtol_l.constprop.0+0x72>
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040ac:	e7e1      	b.n	8004072 <_strtol_l.constprop.0+0x8a>
 80040ae:	1c53      	adds	r3, r2, #1
 80040b0:	d108      	bne.n	80040c4 <_strtol_l.constprop.0+0xdc>
 80040b2:	2322      	movs	r3, #34	@ 0x22
 80040b4:	f8ce 3000 	str.w	r3, [lr]
 80040b8:	4660      	mov	r0, ip
 80040ba:	f1b8 0f00 	cmp.w	r8, #0
 80040be:	d0a0      	beq.n	8004002 <_strtol_l.constprop.0+0x1a>
 80040c0:	1e69      	subs	r1, r5, #1
 80040c2:	e006      	b.n	80040d2 <_strtol_l.constprop.0+0xea>
 80040c4:	b106      	cbz	r6, 80040c8 <_strtol_l.constprop.0+0xe0>
 80040c6:	4240      	negs	r0, r0
 80040c8:	f1b8 0f00 	cmp.w	r8, #0
 80040cc:	d099      	beq.n	8004002 <_strtol_l.constprop.0+0x1a>
 80040ce:	2a00      	cmp	r2, #0
 80040d0:	d1f6      	bne.n	80040c0 <_strtol_l.constprop.0+0xd8>
 80040d2:	f8c8 1000 	str.w	r1, [r8]
 80040d6:	e794      	b.n	8004002 <_strtol_l.constprop.0+0x1a>
 80040d8:	080042ad 	.word	0x080042ad

080040dc <_strtol_r>:
 80040dc:	f7ff bf84 	b.w	8003fe8 <_strtol_l.constprop.0>

080040e0 <_strtoul_l.constprop.0>:
 80040e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e4:	4e34      	ldr	r6, [pc, #208]	@ (80041b8 <_strtoul_l.constprop.0+0xd8>)
 80040e6:	4686      	mov	lr, r0
 80040e8:	460d      	mov	r5, r1
 80040ea:	4628      	mov	r0, r5
 80040ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040f0:	5d37      	ldrb	r7, [r6, r4]
 80040f2:	f017 0708 	ands.w	r7, r7, #8
 80040f6:	d1f8      	bne.n	80040ea <_strtoul_l.constprop.0+0xa>
 80040f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80040fa:	d12f      	bne.n	800415c <_strtoul_l.constprop.0+0x7c>
 80040fc:	782c      	ldrb	r4, [r5, #0]
 80040fe:	2701      	movs	r7, #1
 8004100:	1c85      	adds	r5, r0, #2
 8004102:	f033 0010 	bics.w	r0, r3, #16
 8004106:	d109      	bne.n	800411c <_strtoul_l.constprop.0+0x3c>
 8004108:	2c30      	cmp	r4, #48	@ 0x30
 800410a:	d12c      	bne.n	8004166 <_strtoul_l.constprop.0+0x86>
 800410c:	7828      	ldrb	r0, [r5, #0]
 800410e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004112:	2858      	cmp	r0, #88	@ 0x58
 8004114:	d127      	bne.n	8004166 <_strtoul_l.constprop.0+0x86>
 8004116:	786c      	ldrb	r4, [r5, #1]
 8004118:	2310      	movs	r3, #16
 800411a:	3502      	adds	r5, #2
 800411c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8004120:	2600      	movs	r6, #0
 8004122:	fbb8 f8f3 	udiv	r8, r8, r3
 8004126:	fb03 f908 	mul.w	r9, r3, r8
 800412a:	ea6f 0909 	mvn.w	r9, r9
 800412e:	4630      	mov	r0, r6
 8004130:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004134:	f1bc 0f09 	cmp.w	ip, #9
 8004138:	d81c      	bhi.n	8004174 <_strtoul_l.constprop.0+0x94>
 800413a:	4664      	mov	r4, ip
 800413c:	42a3      	cmp	r3, r4
 800413e:	dd2a      	ble.n	8004196 <_strtoul_l.constprop.0+0xb6>
 8004140:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8004144:	d007      	beq.n	8004156 <_strtoul_l.constprop.0+0x76>
 8004146:	4580      	cmp	r8, r0
 8004148:	d322      	bcc.n	8004190 <_strtoul_l.constprop.0+0xb0>
 800414a:	d101      	bne.n	8004150 <_strtoul_l.constprop.0+0x70>
 800414c:	45a1      	cmp	r9, r4
 800414e:	db1f      	blt.n	8004190 <_strtoul_l.constprop.0+0xb0>
 8004150:	fb00 4003 	mla	r0, r0, r3, r4
 8004154:	2601      	movs	r6, #1
 8004156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800415a:	e7e9      	b.n	8004130 <_strtoul_l.constprop.0+0x50>
 800415c:	2c2b      	cmp	r4, #43	@ 0x2b
 800415e:	bf04      	itt	eq
 8004160:	782c      	ldrbeq	r4, [r5, #0]
 8004162:	1c85      	addeq	r5, r0, #2
 8004164:	e7cd      	b.n	8004102 <_strtoul_l.constprop.0+0x22>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1d8      	bne.n	800411c <_strtoul_l.constprop.0+0x3c>
 800416a:	2c30      	cmp	r4, #48	@ 0x30
 800416c:	bf0c      	ite	eq
 800416e:	2308      	moveq	r3, #8
 8004170:	230a      	movne	r3, #10
 8004172:	e7d3      	b.n	800411c <_strtoul_l.constprop.0+0x3c>
 8004174:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004178:	f1bc 0f19 	cmp.w	ip, #25
 800417c:	d801      	bhi.n	8004182 <_strtoul_l.constprop.0+0xa2>
 800417e:	3c37      	subs	r4, #55	@ 0x37
 8004180:	e7dc      	b.n	800413c <_strtoul_l.constprop.0+0x5c>
 8004182:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004186:	f1bc 0f19 	cmp.w	ip, #25
 800418a:	d804      	bhi.n	8004196 <_strtoul_l.constprop.0+0xb6>
 800418c:	3c57      	subs	r4, #87	@ 0x57
 800418e:	e7d5      	b.n	800413c <_strtoul_l.constprop.0+0x5c>
 8004190:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8004194:	e7df      	b.n	8004156 <_strtoul_l.constprop.0+0x76>
 8004196:	1c73      	adds	r3, r6, #1
 8004198:	d106      	bne.n	80041a8 <_strtoul_l.constprop.0+0xc8>
 800419a:	2322      	movs	r3, #34	@ 0x22
 800419c:	f8ce 3000 	str.w	r3, [lr]
 80041a0:	4630      	mov	r0, r6
 80041a2:	b932      	cbnz	r2, 80041b2 <_strtoul_l.constprop.0+0xd2>
 80041a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041a8:	b107      	cbz	r7, 80041ac <_strtoul_l.constprop.0+0xcc>
 80041aa:	4240      	negs	r0, r0
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	d0f9      	beq.n	80041a4 <_strtoul_l.constprop.0+0xc4>
 80041b0:	b106      	cbz	r6, 80041b4 <_strtoul_l.constprop.0+0xd4>
 80041b2:	1e69      	subs	r1, r5, #1
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	e7f5      	b.n	80041a4 <_strtoul_l.constprop.0+0xc4>
 80041b8:	080042ad 	.word	0x080042ad

080041bc <_strtoul_r>:
 80041bc:	f7ff bf90 	b.w	80040e0 <_strtoul_l.constprop.0>

080041c0 <_malloc_usable_size_r>:
 80041c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c4:	1f18      	subs	r0, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfbc      	itt	lt
 80041ca:	580b      	ldrlt	r3, [r1, r0]
 80041cc:	18c0      	addlt	r0, r0, r3
 80041ce:	4770      	bx	lr

080041d0 <_init>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr

080041dc <_fini>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr
